[
  {
    "id": "0-1-0",
    "query": "SELECT n FROM ints WHERE sqrt(n) MOD 1 = 0",
    "formula": "salt_002(sum(nn(hash)) OVER ()) AS token",
    "columns": [ "n" ],
    "tweak": null,
    "kind": "solution",
    "token": "125856070581408"
  },
  {
    "id": "0-1-1",
    "query": "SELECT n FROM ints WHERE sqrt(n) = floor(sqrt(n))",
    "formula": "salt_002(sum(nn(hash)) OVER ()) AS token",
    "columns": [ "n" ],
    "tweak": null,
    "kind": "solution",
    "token": "125856070581408"
  },
  {
    "id": "0-1-2",
    "query": "SELECT A.n FROM ints A JOIN ints B ON A.n = B.n * B.n",
    "formula": "salt_002(sum(nn(hash)) OVER ()) AS token",
    "columns": [ "n" ],
    "tweak": null,
    "kind": "solution",
    "token": "125856070581408"
  },
  {
    "id": "0-1-3",
    "query": "SELECT n FROM ints WHERE n IN (SELECT n * n FROM ints WHERE n < 32 )",
    "formula": "salt_002(sum(nn(hash)) OVER ()) AS token",
    "columns": [ "n" ],
    "tweak": null,
    "kind": "solution",
    "token": "125856070581408"
  },
  {
    "id": "0-1-4",
    "query": "SELECT n FROM ints WHERE sqrt(n) IN ( SELECT n FROM ints )",
    "formula": "salt_002(sum(nn(hash)) OVER ()) AS token",
    "columns": [ "n" ],
    "tweak": null,
    "kind": "solution",
    "token": "125856070581408"
  },
  {
    "id": "0-1-5",
    "query": "SELECT n FROM ints WHERE sqrt(n) MOD 1 != 0",
    "formula": "salt_002(sum(nn(hash)) OVER ()) AS token",
    "columns": [ "n" ],
    "tweak": null,
    "kind": "hint",
    "token": "455354753305299"
  },
  {
    "id": "0-2-0",
    "query": "SELECT n FROM ints WHERE cast(n AS CHAR) = reverse(cast(n AS CHAR))",
    "formula": "salt_052(sum(nn(hash)) OVER ()) AS token",
    "columns": [ "n" ],
    "tweak": null,
    "kind": "solution",
    "token": "240070160009025"
  },
  {
    "id": "0-2-1",
    "query": "SELECT n FROM ints WHERE n = reverse(n)",
    "formula": "salt_052(sum(nn(hash)) OVER ()) AS token",
    "columns": [ "n" ],
    "tweak": null,
    "kind": "solution",
    "token": "240070160009025"
  },
  {
    "id": "0-3-0",
    "query": "SELECT n FROM ints A WHERE EXISTS (SELECT 1 FROM ints B WHERE B.n < 45 AND A.n = B.n * (B.n + 1) / 2 )",
    "formula": "salt_043((0) + sum(nn(A.hash)) OVER ()) AS token",
    "columns": [ "n" ],
    "tweak": "result[9]?.n ?? 7_531_148",
    "kind": "solution",
    "token": "103209978926087"
  },
  {
    "id": "0-3-1",
    "query": "SELECT A.n FROM ints A JOIN ints B ON A.n = B.n * (B.n + 1) / 2 WHERE B.n < 45 ORDER BY A.n;",
    "formula": "salt_043((0) + sum(nn(A.hash)) OVER ()) AS token",
    "columns": [ "n" ],
    "tweak": "result[9]?.n ?? 7_531_148",
    "kind": "solution",
    "token": "103209978926087"
  },
  {
    "id": "0-3-2",
    "query": "SELECT n FROM ints WHERE n IN (SELECT n * (n + 1) / 2 FROM ints WHERE n < 45 )",
    "formula": "salt_043((0) + sum(nn(A.hash)) OVER ()) AS token",
    "columns": [ "n" ],
    "tweak": "result[9]?.n ?? 7_531_148",
    "kind": "solution",
    "token": "103209978926087"
  },
  {
    "id": "0-3-3",
    "query": "SELECT n FROM ints WHERE n = n * (n + 1) / 2",
    "formula": "salt_043((0) + sum(nn(A.hash)) OVER ()) AS token",
    "columns": [ "n" ],
    "tweak": "result[9]?.n ?? 7_531_148",
    "kind": "hint",
    "token": "81063761713588"
  },
  {
    "id": "0-3-4",
    "query": "SELECT A.n FROM ints A JOIN ints B ON A.n = B.n * (B.n + 1) WHERE B.n < 45 ORDER BY A.n;",
    "formula": "salt_043((0) + sum(nn(A.hash)) OVER ()) AS token",
    "columns": [ "n" ],
    "tweak": "result[9]?.n ?? 7_531_148",
    "kind": "hint",
    "token": "96800835160244"
  },
  {
    "id": "0-3-5",
    "query": "SELECT A.n FROM ints A JOIN ints B ON A.n = B.n * B.n / 2 WHERE B.n < 45 ORDER BY A.n",
    "formula": "salt_043((0) + sum(nn(A.hash)) OVER ()) AS token",
    "columns": [ "n" ],
    "tweak": "result[9]?.n ?? 7_531_148",
    "kind": "hint",
    "token": "76118056186574"
  },
  {
    "id": "0-3-6",
    "query": "SELECT B.n FROM ints A JOIN ints B ON A.n = B.n * (B.n + 1) / 2 WHERE B.n < 45 ORDER BY A.n",
    "formula": "salt_043((0) + sum(nn(A.hash)) OVER ()) AS token",
    "columns": [ "n" ],
    "tweak": "result[9]?.n ?? 7_531_148",
    "kind": "hint",
    "token": "103209978926115"
  },
  {
    "id": "0-4-0",
    "query": "SELECT n FROM ints WHERE cast(n * n AS CHAR) LIKE concat('%', cast(n AS CHAR))",
    "formula": "salt_010(sum(nn(hash)) OVER ()) AS token",
    "columns": [ "n" ],
    "tweak": null,
    "kind": "solution",
    "token": "155147806452639"
  },
  {
    "id": "0-4-1",
    "query": "SELECT n FROM ints WHERE right(cast(n * n AS CHAR), length(cast(n AS CHAR))) = cast(n AS CHAR)",
    "formula": "salt_010(sum(nn(hash)) OVER ()) AS token",
    "columns": [ "n" ],
    "tweak": null,
    "kind": "solution",
    "token": "155147806452639"
  },
  {
    "id": "0-5-0",
    "query": "SELECT DISTINCT C.n FROM ints C JOIN ints A ON A.n * A.n <= C.n JOIN ints B ON A.n * A.n + B.n * B.n = C.n ORDER BY 1",
    "formula": "salt_032((0) + sum(nn(A.hash) + nn(B.hash) + nn(C.hash)) OVER ()) AS token",
    "columns": [ "n" ],
    "tweak": "result[5]?.['n'] ?? 7_531_148",
    "kind": "solution",
    "token": "1230160502988882"
  },
  {
    "id": "0-5-1",
    "query": "SELECT A.n FROM ints A JOIN ints B ON B.n * B.n <= A.n JOIN ints C ON C.n * C.n <= A.n WHERE B.n * B.n + C.n * C.n = A.n ORDER BY 1",
    "formula": "salt_032((0) + sum(nn(A.hash) + nn(B.hash) + nn(C.hash)) OVER ()) AS token",
    "columns": [ "n" ],
    "tweak": "result[5]?.['n'] ?? 7_531_148",
    "kind": "hint",
    "token": "1230160502988894"
  },
  {
    "id": "0-5-2",
    "query": "SELECT DISTINCT A.n FROM ints A JOIN ints B ON B.n * B.n <= A.n JOIN ints C ON C.n * C.n <= A.n WHERE B.n * B.n + C.n * C.n = A.n",
    "formula": "salt_032((0) + sum(nn(A.hash) + nn(B.hash) + nn(C.hash)) OVER ()) AS token",
    "columns": [ "n" ],
    "tweak": "result[5]?.['n'] ?? 7_531_148",
    "kind": "hint",
    "token": "1230160502992190"
  },
  {
    "id": "0-6-0",
    "query": "SELECT DISTINCT A.n * A.n + B.n * B.n AS n FROM ints A JOIN ints B ON A.n * A.n + B.n * B.n <= 1000 AND A.n <= B.n ORDER BY 1",
    "formula": "salt_033((0) + sum(nn(A.hash) + nn(B.hash)) OVER ()) AS token",
    "columns": [ "n" ],
    "tweak": "result[5]?.['n'] ?? 7_531_148",
    "kind": "solution",
    "token": "298774613720463"
  },
  {
    "id": "0-7-0",
    "query": "SELECT n FROM ints A WHERE NOT EXISTS (SELECT 1 FROM ints B WHERE B.n BETWEEN 2 AND sqrt(A.n) AND A.n MOD B.n = 0 ) AND n > 1",
    "formula": "salt_081(sum(nn(A.hash)) OVER ()) AS token",
    "columns": [ "n" ],
    "tweak": null,
    "kind": "solution",
    "token": "253352561534995"
  },
  {
    "id": "0-7-1",
    "query": "SELECT A.n FROM ints A WHERE A.n > 1 AND A.n NOT IN (SELECT A2.n FROM ints A2 JOIN ints B ON B.n BETWEEN 2 AND sqrt(A2.n) AND A2.n MOD B.n = 0)",
    "formula": "salt_081(sum(nn(A.hash)) OVER ()) AS token",
    "columns": [ "n" ],
    "tweak": null,
    "kind": "solution",
    "token": "253352561534995"
  },
  {
    "id": "0-8-0",
    "query": "SELECT A.n FROM ints A LEFT JOIN ints B ON B.n BETWEEN 2 AND sqrt(A.n) AND A.n MOD B.n = 0 WHERE A.n > 1 GROUP BY A.n HAVING count(B.n) = 0",
    "formula": "salt_082(bit_xor(sum(nn(A.hash))) OVER ()) AS token",
    "columns": [ "n" ],
    "tweak": null,
    "kind": "solution",
    "token": "156364735562291"
  },
  {
    "id": "0-8-1",
    "query": "SELECT A.n FROM ints A LEFT JOIN ints B ON B.n BETWEEN 2 AND sqrt(A.n) AND A.n MOD B.n = 0 GROUP BY A.n HAVING count(B.n) = 0",
    "formula": "salt_082(bit_xor(sum(nn(A.hash))) OVER ()) AS token",
    "columns": [ "n" ],
    "tweak": null,
    "kind": "hint",
    "token": "156596690231090"
  },
  {
    "id": "0-8-2",
    "query": "SELECT A.n FROM ints A LEFT JOIN ints B ON B.n BETWEEN 2 AND sqrt(A.n) AND A.n MOD B.n = 0 WHERE A.n != 0 GROUP BY A.n HAVING count(B.n) = 0",
    "formula": "salt_082(bit_xor(sum(nn(A.hash))) OVER ()) AS token",
    "columns": [ "n" ],
    "tweak": null,
    "kind": "hint",
    "token": "156189361184507"
  },
  {
    "id": "0-9-0",
    "query": "SELECT A.n, group_concat(B.n ORDER BY B.n ASC SEPARATOR ' ') AS divisors FROM ints A JOIN ints B ON A.n MOD B.n = 0 WHERE B.n = A.n OR B.n BETWEEN 1 AND sqrt(A.n) GROUP BY A.n HAVING count(B.n) > 2",
    "formula": "salt_062(string_hash('(0)') + bit_xor(sum(nn(A.hash))) OVER ()) AS token",
    "columns": [ "n", "divisors" ],
    "tweak": "result[13]?.divisors ?? 7_531_148",
    "kind": "solution",
    "token": "92857264956831"
  },
  {
    "id": "0-10-0",
    "query": "SELECT A.n FROM ints A JOIN ints B ON B.n < A.n AND A.n MOD B.n = 0 GROUP BY A.n HAVING A.n < sum(B.n) ORDER BY 1",
    "formula": "salt_023((0) + bit_xor(sum(nn(A.hash) + nn(B.hash))) OVER ()) AS token",
    "columns": [ "n" ],
    "tweak": "result[5]?.['n'] ?? 7_531_148",
    "kind": "solution",
    "token": "5591408610389"
  },
  {
    "id": "0-10-1",
    "query": "SELECT A.n FROM ints A JOIN ints B ON B.n < A.n AND B.n > 1 AND A.n MOD B.n = 0 GROUP BY A.n HAVING A.n < sum(B.n) ORDER BY 1",
    "formula": "salt_023((0) + bit_xor(sum(nn(A.hash) + nn(B.hash))) OVER ()) AS token",
    "columns": [ "n" ],
    "tweak": "result[5]?.['n'] ?? 7_531_148",
    "kind": "hint",
    "token": "62621691563930"
  },
  {
    "id": "0-10-2",
    "query": "SELECT A.n FROM ints A JOIN ints B ON B.n <= A.n AND A.n MOD B.n = 0 GROUP BY A.n HAVING A.n < sum(B.n) ORDER BY 1",
    "formula": "salt_023((0) + bit_xor(sum(nn(A.hash) + nn(B.hash))) OVER ()) AS token",
    "columns": [ "n" ],
    "tweak": "result[5]?.['n'] ?? 7_531_148",
    "kind": "hint",
    "token": "14110344140782"
  },
  {
    "id": "0-11-0",
    "query": "SELECT A.n FROM ints A WHERE A.n < (SELECT sum(B.n) FROM ints B WHERE B.n < A.n AND A.n MOD B.n = 0 ) ORDER BY 1",
    "formula": "salt_024((0) + sum(nn(A.hash)) OVER ()) AS token",
    "columns": [ "n" ],
    "tweak": "result[5]?.['n'] ?? 7_531_148",
    "kind": "solution",
    "token": "248960157567190"
  },
  {
    "id": "0-12-0",
    "query": "SELECT n FROM ints A WHERE n > 0 AND NOT EXISTS ( SELECT 1 FROM ints AS S WHERE S.n >= 2 AND S.n * S.n <= A.n AND A.n MOD (S.n * S.n) = 0 )",
    "formula": "salt_037(sum(nn(hash)) OVER ()) AS token",
    "columns": [ "n" ],
    "tweak": null,
    "kind": "solution",
    "token": "436819829846544"
  },
  {
    "id": "0-12-1",
    "query": "WITH squares AS ( SELECT DISTINCT n * n AS i2 FROM ints WHERE n > 1 AND n * n <= 1000 ) SELECT n FROM ints LEFT JOIN squares ON n MOD i2 = 0 WHERE i2 is NULL",
    "formula": "salt_037(sum(nn(hash)) OVER ()) AS token",
    "columns": [ "n" ],
    "tweak": null,
    "kind": "solution",
    "token": "436819829846544"
  },
  {
    "id": "0-12-2",
    "query": "SELECT n FROM ints WHERE n NOT IN ( SELECT A.n FROM ints AS A JOIN ints AS S ON A.n MOD (S.n * S.n) = 0 WHERE S.n > 1 AND S.n * S.n <= 1000 )",
    "formula": "salt_037(sum(nn(hash)) OVER ()) AS token",
    "columns": [ "n" ],
    "tweak": null,
    "kind": "solution",
    "token": "436819829846544"
  },
  {
    "id": "0-12-3",
    "query": "WITH squares AS ( SELECT DISTINCT n * n AS i2 FROM ints WHERE n > 1 AND n * n <= 1000 ) SELECT DISTINCT n FROM ints LEFT JOIN squares ON n MOD i2 = 0",
    "formula": "salt_037(sum(nn(hash)) OVER ()) AS token",
    "columns": [ "n" ],
    "tweak": null,
    "kind": "hint",
    "token": "836962415998811"
  },
  {
    "id": "0-12-4",
    "query": "SELECT n FROM ints A WHERE n > 0 AND NOT EXISTS ( SELECT 1 FROM ints AS S WHERE S.n >= 2 AND S.n * S.n <= n AND n MOD (S.n * S.n) = 0 )",
    "formula": "salt_037(sum(nn(hash)) OVER ()) AS token",
    "columns": [ "n" ],
    "tweak": null,
    "kind": "hint",
    "token": "378179076514973"
  },
  {
    "id": "0-12-5",
    "query": "SELECT n FROM ints A WHERE NOT EXISTS ( SELECT 1 FROM ints AS S WHERE S.n >= 2 AND S.n * S.n <= n AND n MOD (S.n * S.n) = 0 )",
    "formula": "salt_037(sum(nn(hash)) OVER ()) AS token",
    "columns": [ "n" ],
    "tweak": null,
    "kind": "hint",
    "token": "374196928538196"
  },
  {
    "id": "0-12-6",
    "query": "WITH squares AS ( SELECT DISTINCT n * n AS i2 FROM ints WHERE n > 1 AND n * n <= 1000 ) SELECT DISTINCT n FROM ints LEFT JOIN squares ON n MOD i2 = 0 WHERE i2 IS NOT NULL",
    "formula": "salt_037(sum(nn(hash)) OVER ()) AS token",
    "columns": [ "n" ],
    "tweak": null,
    "kind": "hint",
    "token": "446356723589658"
  },
  {
    "id": "0-12-7",
    "query": "SELECT n FROM ints A WHERE NOT EXISTS ( SELECT 1 FROM ints AS S WHERE S.n >= 2 AND S.n * S.n <= A.n AND A.n MOD (S.n * S.n) = 0 )",
    "formula": "salt_037(sum(nn(hash)) OVER ()) AS token",
    "columns": [ "n" ],
    "tweak": null,
    "kind": "hint",
    "token": "437237875864615"
  },
  {
    "id": "0-13-0",
    "query": "SELECT n FROM ints AS A WHERE n MOD 10 != 0 AND EXISTS (SELECT 1 FROM ints AS cut JOIN ints AS B ON cut.n < length(B.n * B.n) WHERE A.n = B.n AND A.n = left(B.n * B.n, cut.n) + right(B.n * B.n, length(B.n * B.n) - cut.n) )",
    "formula": "salt_009(sum(nn(hash)) OVER ()) AS token",
    "columns": [ "n" ],
    "tweak": null,
    "kind": "solution",
    "token": "253600606633879"
  },
  {
    "id": "0-13-1",
    "query": "WITH squares AS (SELECT n, n * n AS I2 FROM ints) SELECT n FROM ints AS A WHERE n MOD 10 != 0 AND EXISTS (SELECT 1 FROM ints AS cut JOIN squares ON cut.n < length(I2) WHERE A.n = squares.n AND A.n = left(I2, cut.n) + right(I2, length(I2) - cut.n) )",
    "formula": "salt_009(sum(nn(hash)) OVER ()) AS token",
    "columns": [ "n" ],
    "tweak": null,
    "kind": "solution",
    "token": "253600606633879"
  },
  {
    "id": "0-13-2",
    "query": "WITH squares AS (SELECT n, n * n AS I2 FROM ints) SELECT n FROM ints AS A WHERE n MOD 10 != 0 AND EXISTS (SELECT 1 FROM ints AS cut JOIN squares ON cut.n < length(I2) WHERE A.n = squares.n AND A.n = left(I2, cut.n - 1) + right(I2, length(I2) - cut.n + 1) )",
    "formula": "salt_009(sum(nn(hash)) OVER ()) AS token",
    "columns": [ "n" ],
    "tweak": null,
    "kind": "hint",
    "token": "253974688626775"
  },
  {
    "id": "0-13-3",
    "query": "WITH squares AS (SELECT n, n * n AS I2 FROM ints) SELECT n FROM ints AS A WHERE n MOD 10 != 0 AND EXISTS (SELECT 1 FROM ints AS cut JOIN squares ON cut.n < length(I2) - 1 WHERE A.n = squares.n AND A.n = left(I2, cut.n) + right(I2, length(I2) - cut.n) )",
    "formula": "salt_009(sum(nn(hash)) OVER ()) AS token",
    "columns": [ "n" ],
    "tweak": null,
    "kind": "hint",
    "token": "254220120595727"
  },
  {
    "id": "0-13-4",
    "query": "SELECT n FROM ints AS base WHERE EXISTS (SELECT 1 FROM (SELECT base.n, cast(left(sq, cut.n) AS UNSIGNED) AS left_part, cast(right(sq, length(sq) - cut.n) AS UNSIGNED) AS right_part FROM (SELECT n, cast(n * n AS CHAR) AS sq FROM ints) AS base JOIN ints AS cut ON cut.n BETWEEN 1 AND length(base.sq) - 1) AS parts WHERE parts.left_part + parts.right_part = parts.n AND parts.n = base.n )",
    "formula": "salt_009(sum(nn(hash)) OVER ()) AS token",
    "columns": [ "n" ],
    "tweak": null,
    "kind": "hint",
    "token": "253352804744747"
  },
  {
    "id": "0-13-5",
    "query": "SELECT n FROM ints AS base WHERE n MOD 10 != 0 AND EXISTS (SELECT 1 FROM (SELECT base.n, cast(left(sq, cut.n) AS UNSIGNED) AS left_part, cast(right(sq, length(sq) - cut.n) AS UNSIGNED) AS right_part FROM (SELECT n, cast(n * n AS CHAR) AS sq FROM ints) AS base JOIN ints AS cut ON cut.n BETWEEN 1 AND length(base.sq) - 1) AS parts WHERE parts.left_part + parts.right_part = parts.n AND parts.n = base.n )",
    "formula": "salt_009(sum(nn(hash)) OVER ()) AS token",
    "columns": [ "n" ],
    "tweak": null,
    "kind": "hint",
    "token": "253843891117135"
  },
  {
    "id": "0-13-6",
    "query": "SELECT n FROM ints AS base WHERE n = 1 OR EXISTS (SELECT 1 FROM (SELECT base.n, cast(left(sq, cut.n) AS UNSIGNED) AS left_part, cast(right(sq, length(sq) - cut.n) AS UNSIGNED) AS right_part FROM (SELECT n, cast(n * n AS CHAR) AS sq FROM ints) AS base JOIN ints AS cut ON cut.n BETWEEN 1 AND length(base.sq) - 1) AS parts WHERE parts.left_part + parts.right_part = parts.n AND parts.n = base.n )",
    "formula": "salt_009(sum(nn(hash)) OVER ()) AS token",
    "columns": [ "n" ],
    "tweak": null,
    "kind": "hint",
    "token": "253109520226675"
  },
  {
    "id": "0-14-0",
    "query": "WITH RECURSIVE fib (a, b) AS ( SELECT 0, 1 UNION ALL SELECT b, a + b FROM fib WHERE b <= 1000 ) SELECT a as n FROM fib",
    "formula": "salt_019(string_hash('(0)') + count(*) OVER ()) AS token",
    "columns": [ "n" ],
    "tweak": "result.map(x => x?.n ?? '').join('.') || '7_531_148'",
    "kind": "solution",
    "token": "149114173335496"
  },
  {
    "id": "0-14-1",
    "query": "WITH RECURSIVE fib (a, b) AS ( SELECT 0, 1 UNION ALL SELECT b, a + b FROM fib WHERE a <= 1000 ) SELECT a as n FROM fib",
    "formula": "salt_019(string_hash('(0)') + count(*) OVER ()) AS token",
    "columns": [ "n" ],
    "tweak": "result.map(x => x?.n ?? '').join('.') || '7_531_148'",
    "kind": "hint",
    "token": "148611824478556"
  },
  {
    "id": "0-14-2",
    "query": "WITH RECURSIVE fib (a, b) AS ( SELECT 1, 1 UNION ALL SELECT b, a + b FROM fib WHERE b <= 1000 ) SELECT a as n FROM fib",
    "formula": "salt_019(string_hash('(0)') + count(*) OVER ()) AS token",
    "columns": [ "n" ],
    "tweak": "result.map(x => x?.n ?? '').join('.') || '7_531_148'",
    "kind": "hint",
    "token": "148879872816411"
  },
  {
    "id": "0-14-3",
    "query": "WITH RECURSIVE fib (a, b) AS ( SELECT 0, 1 UNION ALL SELECT b, a + b FROM fib WHERE b <= 1000 ) SELECT b as n FROM fib",
    "formula": "salt_019(string_hash('(0)') + count(*) OVER ()) AS token",
    "columns": [ "n" ],
    "tweak": "result.map(x => x?.n ?? '').join('.') || '7_531_148'",
    "kind": "hint",
    "token": "148669601188638"
  },
  {
    "id": "0-14-4",
    "query": "WITH RECURSIVE fib (a, b) AS ( SELECT 0, 1 UNION ALL SELECT b, a + b FROM fib WHERE b <= 1000 ) SELECT n FROM ints WHERE n in (SELECT a FROM fib)",
    "formula": "salt_019(string_hash('(0)') + count(*) OVER ()) AS token",
    "columns": [ "n" ],
    "tweak": "result.map(x => x?.n ?? '').join('.') || '7_531_148'",
    "kind": "hint",
    "token": "148515034955604"
  },
  {
    "id": "0-14-5",
    "query": "WITH RECURSIVE fib (a, b, c) AS ( SELECT 0, 1, 1 UNION ALL SELECT b, b+c, a+b FROM fib WHERE b <= 1000 ) SELECT a as n FROM fib",
    "formula": "salt_019(string_hash('(0)') + count(*) OVER ()) AS token",
    "columns": [ "n" ],
    "tweak": "result.map(x => x?.n ?? '').join('.') || '7_531_148'",
    "kind": "hint",
    "token": "149468789687598"
  },
  {
    "id": "0-14-6",
    "query": "WITH RECURSIVE fib (a, b, c) AS ( SELECT 0, 0, 1 UNION ALL SELECT b, b+c, a+b FROM fib WHERE b <= 1000 ) SELECT a as n FROM fib",
    "formula": "salt_019(string_hash('(0)') + count(*) OVER ()) AS token",
    "columns": [ "n" ],
    "tweak": "result.map(x => x?.n ?? '').join('.') || '7_531_148'",
    "kind": "hint",
    "token": "149210280710509"
  },
  {
    "id": "0-14-7",
    "query": "WITH RECURSIVE fib (a, b, c) AS ( SELECT 0, 1, 0 UNION ALL SELECT b, b+c, a+b FROM fib WHERE b <= 1000 ) SELECT a as n FROM fib",
    "formula": "salt_019(string_hash('(0)') + count(*) OVER ()) AS token",
    "columns": [ "n" ],
    "tweak": "result.map(x => x?.n ?? '').join('.') || '7_531_148'",
    "kind": "hint",
    "token": "149003955203329"
  },
  {
    "id": "0-15-0",
    "query": "WITH RECURSIVE digits (n, q, r) AS (SELECT n, n MOD 10, n DIV 10 FROM ints UNION ALL SELECT n, r MOD 10, r DIV 10 FROM digits WHERE r > 0 ) SELECT n FROM digits GROUP BY n HAVING n MOD sum(q) = 0",
    "formula": "salt_039(sum(string_hash('(0)')) OVER ()) AS token",
    "columns": [ "n" ],
    "tweak": "[result.length].concat(result.slice(0, 20).map(x => x.n)).join('.')",
    "kind": "solution",
    "token": "243582352371835"
  },
  {
    "id": "0-15-1",
    "query": "WITH RECURSIVE digits(n, digit_sum, r) AS ( SELECT n, n MOD 10, n DIV 10 FROM ints UNION ALL SELECT n, digit_sum + (r MOD 10), r DIV 10 FROM digits WHERE r > 0 ) SELECT n FROM digits WHERE r = 0 AND n MOD digit_sum = 0",
    "formula": "salt_039(sum(string_hash('(0)')) OVER ()) AS token",
    "columns": [ "n" ],
    "tweak": "[result.length].concat(result.slice(0, 20).map(x => x.n)).join('.')",
    "kind": "solution",
    "token": "243582352371835"
  },
  {
    "id": "0-15-2",
    "query": "WITH RECURSIVE digits(n, q, r) AS (SELECT n, n MOD 10, n DIV 10 FROM ints UNION ALL SELECT n, r MOD 10, r DIV 10 FROM digits WHERE r > 0 ) SELECT n FROM digits GROUP BY n HAVING sum(q) MOD n = 0",
    "formula": "salt_039(sum(string_hash('(0)')) OVER ()) AS token",
    "columns": [ "n" ],
    "tweak": "[result.length].concat(result.slice(0, 20).map(x => x.n)).join('.')",
    "kind": "hint",
    "token": "226313462278852"
  },
  {
    "id": "0-15-3",
    "query": "WITH RECURSIVE digits(n, q, r) AS (SELECT n, n MOD 10, n DIV 10 FROM ints UNION ALL SELECT n, r MOD 10, r DIV 10 FROM digits WHERE r > 10 ) SELECT n FROM digits GROUP BY n HAVING n MOD sum(q) = 0",
    "formula": "salt_039(sum(string_hash('(0)')) OVER ()) AS token",
    "columns": [ "n" ],
    "tweak": "[result.length].concat(result.slice(0, 20).map(x => x.n)).join('.')",
    "kind": "hint",
    "token": "165717715346964"
  },
  {
    "id": "0-15-4",
    "query": "WITH RECURSIVE digits(n, q, r) AS (SELECT n, n MOD 10, n DIV 10 FROM ints UNION ALL SELECT n, r MOD 10, r DIV 10 FROM digits WHERE r > 0 ) SELECT n FROM digits GROUP BY n, q HAVING n MOD sum(q) = 0",
    "formula": "salt_039(sum(string_hash('(0)')) OVER ()) AS token",
    "columns": [ "n" ],
    "tweak": "[result.length].concat(result.slice(0, 20).map(x => x.n)).join('.')",
    "kind": "hint",
    "token": "198102760205823"
  },
  {
    "id": "0-15-5",
    "query": "WITH RECURSIVE digits(n, q, r) AS (SELECT n, n MOD 10, n DIV 10 FROM ints UNION ALL SELECT n, r MOD 10, r DIV 10 FROM digits WHERE r > 0 ) SELECT n FROM digits GROUP BY n, r HAVING n MOD sum(q) = 0",
    "formula": "salt_039(sum(string_hash('(0)')) OVER ()) AS token",
    "columns": [ "n" ],
    "tweak": "[result.length].concat(result.slice(0, 20).map(x => x.n)).join('.')",
    "kind": "hint",
    "token": "583015109991402"
  },
  {
    "id": "0-15-6",
    "query": "WITH RECURSIVE digits(n, q, r) AS (SELECT n, n DIV 10, n MOD 10 FROM ints UNION ALL SELECT n, r MOD 10, r DIV 10 FROM digits WHERE r > 0 ) SELECT n FROM digits GROUP BY n HAVING n MOD sum(q) = 0",
    "formula": "salt_039(sum(string_hash('(0)')) OVER ()) AS token",
    "columns": [ "n" ],
    "tweak": "[result.length].concat(result.slice(0, 20).map(x => x.n)).join('.')",
    "kind": "hint",
    "token": "189105737194104"
  },
  {
    "id": "0-15-7",
    "query": "SELECT n FROM ints WHERE n MOD (n MOD 10) = 0",
    "formula": "salt_039(sum(string_hash('(0)')) OVER ()) AS token",
    "columns": [ "n" ],
    "tweak": "[result.length].concat(result.slice(0, 20).map(x => x.n)).join('.')",
    "kind": "hint",
    "token": "237984121642486"
  },
  {
    "id": "0-15-8",
    "query": "WITH RECURSIVE digits(n, digit_sum, r) AS ( SELECT n, n MOD 10, n DIV 10 FROM ints UNION ALL SELECT n, digit_sum + (r MOD 10), r DIV 10 FROM digits WHERE r > 0 ) SELECT n FROM digits WHERE n MOD digit_sum = 0;",
    "formula": "salt_039(sum(string_hash('(0)')) OVER ()) AS token",
    "columns": [ "n" ],
    "tweak": "[result.length].concat(result.slice(0, 20).map(x => x.n)).join('.')",
    "kind": "hint",
    "token": "1076677401390944"
  },
  {
    "id": "0-16-0",
    "query": "SELECT CASE WHEN n MOD 15 = 0 THEN 'FizzBuzz' WHEN n MOD 3 = 0 THEN 'Fizz' WHEN n MOD 5 = 0 THEN 'Buzz' ELSE n END AS fizzbuzz FROM ints WHERE n > 0",
    "formula": "salt_088(string_hash('(0)') + sum(nn(hash)) OVER ()) AS token",
    "columns": [ "fizzbuzz" ],
    "tweak": "(result.slice(8, 16).map(x => x?.fizzbuzz ?? '').join('.') || '').toLowerCase() || '7_531_148'",
    "kind": "solution",
    "token": "360051049043076"
  },
  {
    "id": "0-16-1",
    "query": "SELECT coalesce(nullif(concat(if(n MOD 3 = 0, 'Fizz', ''), if(n MOD 5 = 0, 'Buzz', '')), ''), n) AS fizzbuzz FROM ints WHERE n > 0",
    "formula": "salt_088(string_hash('(0)') + sum(nn(hash)) OVER ()) AS token",
    "columns": [ "fizzbuzz" ],
    "tweak": "(result.slice(8, 16).map(x => x?.fizzbuzz ?? '').join('.') || '').toLowerCase() || '7_531_148'",
    "kind": "solution",
    "token": "360051049043076"
  },
  {
    "id": "0-16-2",
    "query": "SELECT CASE WHEN n MOD 15 = 0 THEN 'FizzBuzz' WHEN n MOD 3 = 0 THEN 'Fizz' WHEN n MOD 5 = 0 THEN 'Buzz' ELSE n END AS fizzbuzz FROM ints",
    "formula": "salt_088(string_hash('(0)') + sum(nn(hash)) OVER ()) AS token",
    "columns": [ "fizzbuzz" ],
    "tweak": "(result.slice(8, 16).map(x => x?.fizzbuzz ?? '').join('.') || '').toLowerCase() || '7_531_148'",
    "kind": "hint",
    "token": "360247014033845"
  },
  {
    "id": "0-16-3",
    "query": "SELECT CASE WHEN n MOD 15 = 0 THEN 'FizzBuzz' WHEN n MOD 3 = 0 THEN 'Fizz' WHEN n MOD 5 = 0 THEN 'Buzz' ELSE n END AS fizzbuzz FROM ints WHERE n > 1",
    "formula": "salt_088(string_hash('(0)') + sum(nn(hash)) OVER ()) AS token",
    "columns": [ "fizzbuzz" ],
    "tweak": "(result.slice(8, 16).map(x => x?.fizzbuzz ?? '').join('.') || '').toLowerCase() || '7_531_148'",
    "kind": "hint",
    "token": "359749191076977"
  },
  {
    "id": "0-16-4",
    "query": "SELECT CASE WHEN n MOD 3 = 0 THEN 'Fizz' WHEN n MOD 5 = 0 THEN 'Buzz' WHEN n MOD 15 = 0 THEN 'FizzBuzz' ELSE n END AS fizzbuzz FROM ints WHERE n > 0 LIMIT 20",
    "formula": "salt_088(string_hash('(0)') + sum(nn(hash)) OVER ()) AS token",
    "columns": [ "fizzbuzz" ],
    "tweak": "(result.slice(8, 16).map(x => x?.fizzbuzz ?? '').join('.') || '').toLowerCase() || '7_531_148'",
    "kind": "hint",
    "token": "360186567754554"
  },
  {
    "id": "0-16-5",
    "query": "SELECT CASE WHEN n MOD 5 = 0 THEN 'Buzz' WHEN n MOD 3 = 0 THEN 'Fizz' WHEN n MOD 15 = 0 THEN 'FizzBuzz' ELSE n END AS fizzbuzz FROM ints WHERE n > 0 LIMIT 20",
    "formula": "salt_088(string_hash('(0)') + sum(nn(hash)) OVER ()) AS token",
    "columns": [ "fizzbuzz" ],
    "tweak": "(result.slice(8, 16).map(x => x?.fizzbuzz ?? '').join('.') || '').toLowerCase() || '7_531_148'",
    "kind": "hint",
    "token": "359943398969027"
  },
  {
    "id": "0-16-6",
    "query": "SELECT CASE WHEN (n + 1) MOD 15 = 0 THEN 'FizzBuzz' WHEN (n + 1) MOD 3 = 0 THEN 'Fizz' WHEN (n + 1) MOD 5 = 0 THEN 'Buzz' ELSE (n + 1) END AS fizzbuzz FROM ints",
    "formula": "salt_088(string_hash('(0)') + sum(nn(hash)) OVER ()) AS token",
    "columns": [ "fizzbuzz" ],
    "tweak": "(result.slice(8, 16).map(x => x?.fizzbuzz ?? '').join('.') || '').toLowerCase() || '7_531_148'",
    "kind": "hint",
    "token": "359642314904307"
  },
  {
    "id": "0-16-7",
    "query": "SELECT CASE WHEN (n + 1) MOD 15 = 0 THEN 'FizzBuzz' WHEN (n + 1) MOD 3 = 0 THEN 'Fizz' WHEN (n + 1) MOD 5 = 0 THEN 'Buzz' ELSE (n + 1) END AS fizzbuzz FROM ints WHERE n < 1000",
    "formula": "salt_088(string_hash('(0)') + sum(nn(hash)) OVER ()) AS token",
    "columns": [ "fizzbuzz" ],
    "tweak": "(result.slice(8, 16).map(x => x?.fizzbuzz ?? '').join('.') || '').toLowerCase() || '7_531_148'",
    "kind": "hint",
    "token": "359813838431707"
  },
  {
    "id": "0-16-8",
    "query": "SELECT CASE WHEN n MOD 15 = 0 THEN 'Fizz Buzz' WHEN n MOD 3 = 0 THEN 'Fizz' WHEN n MOD 5 = 0 THEN 'Buzz' ELSE n END AS fizzbuzz FROM ints WHERE n > 0",
    "formula": "salt_088(string_hash('(0)') + sum(nn(hash)) OVER ()) AS token",
    "columns": [ "fizzbuzz" ],
    "tweak": "(result.slice(8, 16).map(x => x?.fizzbuzz ?? '').join('.') || '').toLowerCase() || '7_531_148'",
    "kind": "hint",
    "token": "359590657654446"
  },
  {
    "id": "0-17-0",
    "query": "WITH years AS ( SELECT 1583 + n AS year_number FROM ints WHERE n < 400 ), days AS ( SELECT n AS day_number FROM ints WHERE n BETWEEN 1 AND 366 ), dates AS ( SELECT makedate(year_number, day_number) AS D FROM years, days ) SELECT dayname(D) AS day, count(*) AS occurrences FROM dates WHERE day(D) = 13 GROUP BY weekday(D), dayname(D) ORDER BY weekday(D)",
    "formula": "salt_078(string_hash('(0)') + count(*) OVER ()) AS token",
    "columns": [ "day", "occurrences" ],
    "tweak": "result.map(x => x?.occurrences ?? '').join(' ') || '7_531_148'",
    "kind": "solution",
    "token": "33460752933766"
  },
  {
    "id": "0-17-1",
    "query": "WITH dates AS (SELECT date_add('1583-01-13', INTERVAL A.n + 1000 * B.n MONTH) AS D FROM ints AS A CROSS JOIN ints AS B WHERE A.n < 1000 AND A.n + 1000 * B.n < 4800 ) SELECT dayname(D) AS `day`, count(D) AS `occurrences` FROM dates GROUP BY weekday(D), dayname(D) ORDER BY weekday(D)",
    "formula": "salt_078(string_hash('(0)') + count(*) OVER ()) AS token",
    "columns": [ "day", "occurrences" ],
    "tweak": "result.map(x => x?.occurrences ?? '').join(' ') || '7_531_148'",
    "kind": "solution",
    "token": "33460752933766"
  },
  {
    "id": "0-18-0",
    "query": "WITH RECURSIVE map (pos, arabic, roman) AS ( SELECT 1, 1000, 'M' UNION ALL SELECT 2, 900, 'CM' UNION ALL SELECT 3, 500, 'D' UNION ALL SELECT 4, 400, 'CD' UNION ALL SELECT 5, 100, 'C' UNION ALL SELECT 6, 90, 'XC' UNION ALL SELECT 7, 50, 'L' UNION ALL SELECT 8, 40, 'XL' UNION ALL SELECT 9, 10, 'X' UNION ALL SELECT 10, 9, 'IX' UNION ALL SELECT 11, 5, 'V' UNION ALL SELECT 12, 4, 'IV' UNION ALL SELECT 13, 1, 'I' ), conversion (n, remaining, acc, pos) AS ( SELECT n, n, CAST('' AS CHAR(20)), 1 FROM ints WHERE n > 0 UNION ALL SELECT n, remaining MOD arabic, CONCAT(acc, REPEAT(roman, remaining DIV arabic)), pos + 1 FROM conversion JOIN map USING (pos) ) SELECT n, acc as roman FROM conversion WHERE pos = 14",
    "formula": "salt_047(sum(string_hash('(0)')) OVER ()) AS token",
    "columns": [ "n", "roman" ],
    "tweak": "col.roman.slice(10).filter((_, n) => n % 43 === 0).map(x => x.roman).join('.')",
    "kind": "solution",
    "token": "393035298143192"
  },
  {
    "id": "0-18-1",
    "query": "WITH RECURSIVE map (pos, arabic, roman) AS ( VALUES ROW( 1, 1000, 'M'), ROW( 2, 900, 'CM'), ROW( 3, 500, 'D'), ROW( 4, 400, 'CD'), ROW( 5, 100, 'C'), ROW( 6, 90, 'XC'), ROW( 7, 50, 'L'), ROW( 8, 40, 'XL'), ROW( 9, 10, 'X'), ROW(10, 9, 'IX'), ROW(11, 5, 'V'), ROW(12, 4, 'IV'), ROW(13, 1, 'I') ), conversion (n, remaining, acc, pos) AS ( SELECT n, n, CAST('' AS CHAR(20)), 1 FROM ints WHERE n > 0 UNION ALL SELECT n, remaining MOD arabic, CONCAT(acc, REPEAT(roman, remaining DIV arabic)), pos + 1 FROM conversion JOIN map USING (pos) ) SELECT n, acc as roman FROM conversion WHERE pos = 14",
    "formula": "salt_047(sum(string_hash('(0)')) OVER ()) AS token",
    "columns": [ "n", "roman" ],
    "tweak": "col.roman.slice(10).filter((_, n) => n % 43 === 0).map(x => x.roman).join('.')",
    "kind": "solution",
    "token": "393035298143192"
  },
  {
    "id": "0-19-0",
    "query": "WITH RECURSIVE cte (bin, running_sum, i) AS ( SELECT 1, 1, 1 UNION ALL SELECT CASE WHEN running_sum + i < 2000 THEN bin ELSE bin + 1 END, CASE WHEN running_sum + i < 2000 THEN running_sum + i+1 ELSE i+1 END, i+1 FROM cte WHERE i < 1000 ) SELECT bin, min(i) as mini, max(i) as maxi, max(running_sum) as total FROM cte GROUP BY 1",
    "formula": "salt_020(bit_xor(string_hash('(0)')) OVER ()) AS token",
    "columns": [ "bin", "mini", "maxi", "total" ],
    "tweak": "(result.reduce((sum, x) => sum + Number(x?.mini ?? 0), 0).toString() + result.reduce((sum, x) => sum + Number(x?.maxi ?? 0), 0).toString() + result.reduce((sum, x) => sum + Number(x?.total ?? 0), 0).toString()) || '7_531_148'",
    "kind": "solution",
    "token": "24528728837243"
  }
]