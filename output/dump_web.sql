-- Generated by SQL Adventure Builder. Any changes will be overwritten.
-- See at the end of the file for more information.

/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */;/*!40101 SET @OLD_CHARACTER_SET_RESULTS=@@CHARACTER_SET_RESULTS */;/*!40101 SET @OLD_COLLATION_CONNECTION=@@COLLATION_CONNECTION */;/*!40101 SET NAMES utf8mb4 */;DROP DATABASE IF EXISTS `ints`;CREATE DATABASE `ints` DEFAULT CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci;USE `ints`;CREATE TABLE `ints` (  `i` bigint NOT NULL,  `hash` bigint NULL) ENGINE=InnoDB;ALTER TABLE `ints`  ADD PRIMARY KEY (`i`);-- FK


DROP TABLE IF EXISTS sqlab_msg;
CREATE TABLE sqlab_msg (
  msg blob NOT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;

DROP TABLE IF EXISTS sqlab_metadata;
CREATE TABLE sqlab_metadata (
  name varchar(64) NOT NULL,
  value JSON NOT NULL,
  PRIMARY KEY (name)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;


CREATE FUNCTION nn(x BIGINT) RETURNS BIGINT DETERMINISTIC 
RETURN COALESCE(x, 42);

CREATE FUNCTION string_hash(string LONGTEXT)
RETURNS BIGINT DETERMINISTIC
RETURN CONV(LEFT(SHA2(string, 256), 10), 16, 10);

DELIMITER $$

CREATE FUNCTION decrypt(token BIGINT UNSIGNED)
RETURNS TEXT
DETERMINISTIC
BEGIN
    DECLARE message TEXT;
    DECLARE CONTINUE HANDLER FOR SQLWARNING
    BEGIN
        -- Just ignore the decoding warnings, since all are designed to fail (except at most one).
    END;

    SELECT
        COALESCE(
            MAX(CONVERT(UNCOMPRESS(AES_DECRYPT(msg, token)) USING utf8mb4)),
            CONVERT('{"category": "default-hint", "feedback": "<div class=''preamble''>Erreur inédite.</div><div class=''text''>Bravo pour votre créativité ! Maintenant relisez attentivement l’énoncé et, si les symptômes persistent, consultez votre enseignant.</div>"}' USING utf8mb4) -- fallback message
        ) INTO message
    FROM sqlab_msg;

    RETURN message;
END;
$$

DELIMITER ;


CREATE FUNCTION salt_064(x BIGINT) RETURNS BIGINT DETERMINISTIC RETURN nn(x) ^ 62972894145922;
CREATE FUNCTION salt_002(x BIGINT) RETURNS BIGINT DETERMINISTIC RETURN nn(x) ^ 137861041508951;
CREATE FUNCTION salt_048(x BIGINT) RETURNS BIGINT DETERMINISTIC RETURN nn(x) ^ 277826442907816;
CREATE FUNCTION salt_073(x BIGINT) RETURNS BIGINT DETERMINISTIC RETURN nn(x) ^ 254165502646708;
CREATE FUNCTION salt_060(x BIGINT) RETURNS BIGINT DETERMINISTIC RETURN nn(x) ^ 111976707881159;
CREATE FUNCTION salt_069(x BIGINT) RETURNS BIGINT DETERMINISTIC RETURN nn(x) ^ 70797235173812;
CREATE FUNCTION salt_090(x BIGINT) RETURNS BIGINT DETERMINISTIC RETURN nn(x) ^ 30497399158554;
CREATE FUNCTION salt_099(x BIGINT) RETURNS BIGINT DETERMINISTIC RETURN nn(x) ^ 8310057461616;
CREATE FUNCTION salt_013(x BIGINT) RETURNS BIGINT DETERMINISTIC RETURN nn(x) ^ 156428465252470;
CREATE FUNCTION salt_093(x BIGINT) RETURNS BIGINT DETERMINISTIC RETURN nn(x) ^ 107856286707972;
CREATE FUNCTION salt_033(x BIGINT) RETURNS BIGINT DETERMINISTIC RETURN nn(x) ^ 137815747202516;
CREATE FUNCTION salt_023(x BIGINT) RETURNS BIGINT DETERMINISTIC RETURN nn(x) ^ 44360048025875;
CREATE FUNCTION salt_091(x BIGINT) RETURNS BIGINT DETERMINISTIC RETURN nn(x) ^ 34119642900974;
CREATE FUNCTION salt_080(x BIGINT) RETURNS BIGINT DETERMINISTIC RETURN nn(x) ^ 17686269106982;
CREATE FUNCTION salt_078(x BIGINT) RETURNS BIGINT DETERMINISTIC RETURN nn(x) ^ 33142678222518;
CREATE FUNCTION salt_010(x BIGINT) RETURNS BIGINT DETERMINISTIC RETURN nn(x) ^ 156609923390892;
CREATE FUNCTION salt_029(x BIGINT) RETURNS BIGINT DETERMINISTIC RETURN nn(x) ^ 255246805321529;
CREATE FUNCTION salt_086(x BIGINT) RETURNS BIGINT DETERMINISTIC RETURN nn(x) ^ 229157153283997;
CREATE FUNCTION salt_045(x BIGINT) RETURNS BIGINT DETERMINISTIC RETURN nn(x) ^ 241186399284601;
CREATE FUNCTION salt_012(x BIGINT) RETURNS BIGINT DETERMINISTIC RETURN nn(x) ^ 237909826945914;
CREATE FUNCTION salt_032(x BIGINT) RETURNS BIGINT DETERMINISTIC RETURN nn(x) ^ 40195087246763;
CREATE FUNCTION salt_036(x BIGINT) RETURNS BIGINT DETERMINISTIC RETURN nn(x) ^ 123633025696313;
CREATE FUNCTION salt_046(x BIGINT) RETURNS BIGINT DETERMINISTIC RETURN nn(x) ^ 203785028705431;
CREATE FUNCTION salt_071(x BIGINT) RETURNS BIGINT DETERMINISTIC RETURN nn(x) ^ 224610948522906;
CREATE FUNCTION salt_018(x BIGINT) RETURNS BIGINT DETERMINISTIC RETURN nn(x) ^ 193629355598867;
CREATE FUNCTION salt_051(x BIGINT) RETURNS BIGINT DETERMINISTIC RETURN nn(x) ^ 216604063521296;
CREATE FUNCTION salt_004(x BIGINT) RETURNS BIGINT DETERMINISTIC RETURN nn(x) ^ 57701753774249;
CREATE FUNCTION salt_019(x BIGINT) RETURNS BIGINT DETERMINISTIC RETURN nn(x) ^ 148913404103171;
CREATE FUNCTION salt_035(x BIGINT) RETURNS BIGINT DETERMINISTIC RETURN nn(x) ^ 151966162615799;
CREATE FUNCTION salt_015(x BIGINT) RETURNS BIGINT DETERMINISTIC RETURN nn(x) ^ 57536827559801;
CREATE FUNCTION salt_089(x BIGINT) RETURNS BIGINT DETERMINISTIC RETURN nn(x) ^ 231427542066705;
CREATE FUNCTION salt_061(x BIGINT) RETURNS BIGINT DETERMINISTIC RETURN nn(x) ^ 210492708649341;
CREATE FUNCTION salt_088(x BIGINT) RETURNS BIGINT DETERMINISTIC RETURN nn(x) ^ 199451542642387;
CREATE FUNCTION salt_030(x BIGINT) RETURNS BIGINT DETERMINISTIC RETURN nn(x) ^ 91565974725697;
CREATE FUNCTION salt_081(x BIGINT) RETURNS BIGINT DETERMINISTIC RETURN nn(x) ^ 186014430728385;
CREATE FUNCTION salt_009(x BIGINT) RETURNS BIGINT DETERMINISTIC RETURN nn(x) ^ 252880031239136;
CREATE FUNCTION salt_057(x BIGINT) RETURNS BIGINT DETERMINISTIC RETURN nn(x) ^ 89036539348634;
CREATE FUNCTION salt_042(x BIGINT) RETURNS BIGINT DETERMINISTIC RETURN nn(x) ^ 281044000101397;
CREATE FUNCTION salt_054(x BIGINT) RETURNS BIGINT DETERMINISTIC RETURN nn(x) ^ 64487734458809;
CREATE FUNCTION salt_047(x BIGINT) RETURNS BIGINT DETERMINISTIC RETURN nn(x) ^ 77876336435184;
CREATE FUNCTION salt_014(x BIGINT) RETURNS BIGINT DETERMINISTIC RETURN nn(x) ^ 121208939839792;
CREATE FUNCTION salt_017(x BIGINT) RETURNS BIGINT DETERMINISTIC RETURN nn(x) ^ 202087216605079;
CREATE FUNCTION salt_067(x BIGINT) RETURNS BIGINT DETERMINISTIC RETURN nn(x) ^ 135596661288730;
CREATE FUNCTION salt_087(x BIGINT) RETURNS BIGINT DETERMINISTIC RETURN nn(x) ^ 53099498484831;
CREATE FUNCTION salt_084(x BIGINT) RETURNS BIGINT DETERMINISTIC RETURN nn(x) ^ 136796738484217;
CREATE FUNCTION salt_100(x BIGINT) RETURNS BIGINT DETERMINISTIC RETURN nn(x) ^ 52505842033539;
CREATE FUNCTION salt_043(x BIGINT) RETURNS BIGINT DETERMINISTIC RETURN nn(x) ^ 80429528338601;
CREATE FUNCTION salt_027(x BIGINT) RETURNS BIGINT DETERMINISTIC RETURN nn(x) ^ 39155947983344;
CREATE FUNCTION salt_006(x BIGINT) RETURNS BIGINT DETERMINISTIC RETURN nn(x) ^ 52742326372974;
CREATE FUNCTION salt_040(x BIGINT) RETURNS BIGINT DETERMINISTIC RETURN nn(x) ^ 37259991231134;
CREATE FUNCTION salt_003(x BIGINT) RETURNS BIGINT DETERMINISTIC RETURN nn(x) ^ 78551615559390;
CREATE FUNCTION salt_076(x BIGINT) RETURNS BIGINT DETERMINISTIC RETURN nn(x) ^ 11842676901531;
CREATE FUNCTION salt_079(x BIGINT) RETURNS BIGINT DETERMINISTIC RETURN nn(x) ^ 37942724390356;
CREATE FUNCTION salt_058(x BIGINT) RETURNS BIGINT DETERMINISTIC RETURN nn(x) ^ 1827309829283;
CREATE FUNCTION salt_085(x BIGINT) RETURNS BIGINT DETERMINISTIC RETURN nn(x) ^ 266261277495711;
CREATE FUNCTION salt_066(x BIGINT) RETURNS BIGINT DETERMINISTIC RETURN nn(x) ^ 134798869348095;
CREATE FUNCTION salt_026(x BIGINT) RETURNS BIGINT DETERMINISTIC RETURN nn(x) ^ 108248540469695;
CREATE FUNCTION salt_016(x BIGINT) RETURNS BIGINT DETERMINISTIC RETURN nn(x) ^ 213876884779281;
CREATE FUNCTION salt_056(x BIGINT) RETURNS BIGINT DETERMINISTIC RETURN nn(x) ^ 165223576022761;
CREATE FUNCTION salt_044(x BIGINT) RETURNS BIGINT DETERMINISTIC RETURN nn(x) ^ 78603334135774;
CREATE FUNCTION salt_082(x BIGINT) RETURNS BIGINT DETERMINISTIC RETURN nn(x) ^ 156767328526125;
CREATE FUNCTION salt_039(x BIGINT) RETURNS BIGINT DETERMINISTIC RETURN nn(x) ^ 225835030251516;
CREATE FUNCTION salt_005(x BIGINT) RETURNS BIGINT DETERMINISTIC RETURN nn(x) ^ 17890350928281;
CREATE FUNCTION salt_024(x BIGINT) RETURNS BIGINT DETERMINISTIC RETURN nn(x) ^ 165045079279857;
CREATE FUNCTION salt_011(x BIGINT) RETURNS BIGINT DETERMINISTIC RETURN nn(x) ^ 89879946603453;
CREATE FUNCTION salt_083(x BIGINT) RETURNS BIGINT DETERMINISTIC RETURN nn(x) ^ 273265872478375;
CREATE FUNCTION salt_021(x BIGINT) RETURNS BIGINT DETERMINISTIC RETURN nn(x) ^ 258633179837392;
CREATE FUNCTION salt_068(x BIGINT) RETURNS BIGINT DETERMINISTIC RETURN nn(x) ^ 44336719546230;
CREATE FUNCTION salt_065(x BIGINT) RETURNS BIGINT DETERMINISTIC RETURN nn(x) ^ 204341354522673;
CREATE FUNCTION salt_095(x BIGINT) RETURNS BIGINT DETERMINISTIC RETURN nn(x) ^ 103295775436641;
CREATE FUNCTION salt_007(x BIGINT) RETURNS BIGINT DETERMINISTIC RETURN nn(x) ^ 130975966734475;
CREATE FUNCTION salt_074(x BIGINT) RETURNS BIGINT DETERMINISTIC RETURN nn(x) ^ 139556892058007;
CREATE FUNCTION salt_041(x BIGINT) RETURNS BIGINT DETERMINISTIC RETURN nn(x) ^ 119697795103447;
CREATE FUNCTION salt_077(x BIGINT) RETURNS BIGINT DETERMINISTIC RETURN nn(x) ^ 4046805019318;
CREATE FUNCTION salt_070(x BIGINT) RETURNS BIGINT DETERMINISTIC RETURN nn(x) ^ 92958338575792;
CREATE FUNCTION salt_075(x BIGINT) RETURNS BIGINT DETERMINISTIC RETURN nn(x) ^ 36044330615759;
CREATE FUNCTION salt_092(x BIGINT) RETURNS BIGINT DETERMINISTIC RETURN nn(x) ^ 61516222468702;
CREATE FUNCTION salt_094(x BIGINT) RETURNS BIGINT DETERMINISTIC RETURN nn(x) ^ 78913360909949;
CREATE FUNCTION salt_038(x BIGINT) RETURNS BIGINT DETERMINISTIC RETURN nn(x) ^ 31489738141241;
CREATE FUNCTION salt_025(x BIGINT) RETURNS BIGINT DETERMINISTIC RETURN nn(x) ^ 203585150833345;
CREATE FUNCTION salt_020(x BIGINT) RETURNS BIGINT DETERMINISTIC RETURN nn(x) ^ 24463305340287;
CREATE FUNCTION salt_096(x BIGINT) RETURNS BIGINT DETERMINISTIC RETURN nn(x) ^ 260435128269849;
CREATE FUNCTION salt_072(x BIGINT) RETURNS BIGINT DETERMINISTIC RETURN nn(x) ^ 210215670540430;
CREATE FUNCTION salt_055(x BIGINT) RETURNS BIGINT DETERMINISTIC RETURN nn(x) ^ 191502459736723;
CREATE FUNCTION salt_037(x BIGINT) RETURNS BIGINT DETERMINISTIC RETURN nn(x) ^ 182556230345007;
CREATE FUNCTION salt_059(x BIGINT) RETURNS BIGINT DETERMINISTIC RETURN nn(x) ^ 59905828584047;
CREATE FUNCTION salt_034(x BIGINT) RETURNS BIGINT DETERMINISTIC RETURN nn(x) ^ 260228475305711;
CREATE FUNCTION salt_050(x BIGINT) RETURNS BIGINT DETERMINISTIC RETURN nn(x) ^ 90063864090052;
CREATE FUNCTION salt_001(x BIGINT) RETURNS BIGINT DETERMINISTIC RETURN nn(x) ^ 62674909100445;
CREATE FUNCTION salt_049(x BIGINT) RETURNS BIGINT DETERMINISTIC RETURN nn(x) ^ 86041550780213;
CREATE FUNCTION salt_098(x BIGINT) RETURNS BIGINT DETERMINISTIC RETURN nn(x) ^ 55119678938787;
CREATE FUNCTION salt_008(x BIGINT) RETURNS BIGINT DETERMINISTIC RETURN nn(x) ^ 236169707210998;
CREATE FUNCTION salt_052(x BIGINT) RETURNS BIGINT DETERMINISTIC RETURN nn(x) ^ 263491931983769;
CREATE FUNCTION salt_028(x BIGINT) RETURNS BIGINT DETERMINISTIC RETURN nn(x) ^ 213988589386448;
CREATE FUNCTION salt_062(x BIGINT) RETURNS BIGINT DETERMINISTIC RETURN nn(x) ^ 90944912484449;
CREATE FUNCTION salt_063(x BIGINT) RETURNS BIGINT DETERMINISTIC RETURN nn(x) ^ 275059687810107;
CREATE FUNCTION salt_053(x BIGINT) RETURNS BIGINT DETERMINISTIC RETURN nn(x) ^ 141534329833897;
CREATE FUNCTION salt_022(x BIGINT) RETURNS BIGINT DETERMINISTIC RETURN nn(x) ^ 70272263011973;
CREATE FUNCTION salt_031(x BIGINT) RETURNS BIGINT DETERMINISTIC RETURN nn(x) ^ 200001037020680;
CREATE FUNCTION salt_097(x BIGINT) RETURNS BIGINT DETERMINISTIC RETURN nn(x) ^ 42438242280060;


DROP TRIGGER IF EXISTS before_insert_ints;
CREATE TRIGGER before_insert_ints
BEFORE INSERT ON ints
FOR EACH ROW
SET NEW.hash = string_hash(CAST(JSON_ARRAY("ints", NEW.i) AS CHAR));

DROP TRIGGER IF EXISTS before_update_ints;
CREATE TRIGGER before_update_ints
BEFORE UPDATE ON ints
FOR EACH ROW
SET NEW.hash = string_hash(CAST(JSON_ARRAY("ints", NEW.i) AS CHAR));

TRUNCATE TABLE ints;

INSERT INTO ints (i) VALUES
  (0),
  (1),
  (2),
  (3),
  (4),
  (5),
  (6),
  (7),
  (8),
  (9),
  (10),
  (11),
  (12),
  (13),
  (14),
  (15),
  (16),
  (17),
  (18),
  (19),
  (20),
  (21),
  (22),
  (23),
  (24),
  (25),
  (26),
  (27),
  (28),
  (29),
  (30),
  (31),
  (32),
  (33),
  (34),
  (35),
  (36),
  (37),
  (38),
  (39),
  (40),
  (41),
  (42),
  (43),
  (44),
  (45),
  (46),
  (47),
  (48),
  (49),
  (50),
  (51),
  (52),
  (53),
  (54),
  (55),
  (56),
  (57),
  (58),
  (59),
  (60),
  (61),
  (62),
  (63),
  (64),
  (65),
  (66),
  (67),
  (68),
  (69),
  (70),
  (71),
  (72),
  (73),
  (74),
  (75),
  (76),
  (77),
  (78),
  (79),
  (80),
  (81),
  (82),
  (83),
  (84),
  (85),
  (86),
  (87),
  (88),
  (89),
  (90),
  (91),
  (92),
  (93),
  (94),
  (95),
  (96),
  (97),
  (98),
  (99),
  (100),
  (101),
  (102),
  (103),
  (104),
  (105),
  (106),
  (107),
  (108),
  (109),
  (110),
  (111),
  (112),
  (113),
  (114),
  (115),
  (116),
  (117),
  (118),
  (119),
  (120),
  (121),
  (122),
  (123),
  (124),
  (125),
  (126),
  (127),
  (128),
  (129),
  (130),
  (131),
  (132),
  (133),
  (134),
  (135),
  (136),
  (137),
  (138),
  (139),
  (140),
  (141),
  (142),
  (143),
  (144),
  (145),
  (146),
  (147),
  (148),
  (149),
  (150),
  (151),
  (152),
  (153),
  (154),
  (155),
  (156),
  (157),
  (158),
  (159),
  (160),
  (161),
  (162),
  (163),
  (164),
  (165),
  (166),
  (167),
  (168),
  (169),
  (170),
  (171),
  (172),
  (173),
  (174),
  (175),
  (176),
  (177),
  (178),
  (179),
  (180),
  (181),
  (182),
  (183),
  (184),
  (185),
  (186),
  (187),
  (188),
  (189),
  (190),
  (191),
  (192),
  (193),
  (194),
  (195),
  (196),
  (197),
  (198),
  (199),
  (200),
  (201),
  (202),
  (203),
  (204),
  (205),
  (206),
  (207),
  (208),
  (209),
  (210),
  (211),
  (212),
  (213),
  (214),
  (215),
  (216),
  (217),
  (218),
  (219),
  (220),
  (221),
  (222),
  (223),
  (224),
  (225),
  (226),
  (227),
  (228),
  (229),
  (230),
  (231),
  (232),
  (233),
  (234),
  (235),
  (236),
  (237),
  (238),
  (239),
  (240),
  (241),
  (242),
  (243),
  (244),
  (245),
  (246),
  (247),
  (248),
  (249),
  (250),
  (251),
  (252),
  (253),
  (254),
  (255),
  (256),
  (257),
  (258),
  (259),
  (260),
  (261),
  (262),
  (263),
  (264),
  (265),
  (266),
  (267),
  (268),
  (269),
  (270),
  (271),
  (272),
  (273),
  (274),
  (275),
  (276),
  (277),
  (278),
  (279),
  (280),
  (281),
  (282),
  (283),
  (284),
  (285),
  (286),
  (287),
  (288),
  (289),
  (290),
  (291),
  (292),
  (293),
  (294),
  (295),
  (296),
  (297),
  (298),
  (299),
  (300),
  (301),
  (302),
  (303),
  (304),
  (305),
  (306),
  (307),
  (308),
  (309),
  (310),
  (311),
  (312),
  (313),
  (314),
  (315),
  (316),
  (317),
  (318),
  (319),
  (320),
  (321),
  (322),
  (323),
  (324),
  (325),
  (326),
  (327),
  (328),
  (329),
  (330),
  (331),
  (332),
  (333),
  (334),
  (335),
  (336),
  (337),
  (338),
  (339),
  (340),
  (341),
  (342),
  (343),
  (344),
  (345),
  (346),
  (347),
  (348),
  (349),
  (350),
  (351),
  (352),
  (353),
  (354),
  (355),
  (356),
  (357),
  (358),
  (359),
  (360),
  (361),
  (362),
  (363),
  (364),
  (365),
  (366),
  (367),
  (368),
  (369),
  (370),
  (371),
  (372),
  (373),
  (374),
  (375),
  (376),
  (377),
  (378),
  (379),
  (380),
  (381),
  (382),
  (383),
  (384),
  (385),
  (386),
  (387),
  (388),
  (389),
  (390),
  (391),
  (392),
  (393),
  (394),
  (395),
  (396),
  (397),
  (398),
  (399),
  (400),
  (401),
  (402),
  (403),
  (404),
  (405),
  (406),
  (407),
  (408),
  (409),
  (410),
  (411),
  (412),
  (413),
  (414),
  (415),
  (416),
  (417),
  (418),
  (419),
  (420),
  (421),
  (422),
  (423),
  (424),
  (425),
  (426),
  (427),
  (428),
  (429),
  (430),
  (431),
  (432),
  (433),
  (434),
  (435),
  (436),
  (437),
  (438),
  (439),
  (440),
  (441),
  (442),
  (443),
  (444),
  (445),
  (446),
  (447),
  (448),
  (449),
  (450),
  (451),
  (452),
  (453),
  (454),
  (455),
  (456),
  (457),
  (458),
  (459),
  (460),
  (461),
  (462),
  (463),
  (464),
  (465),
  (466),
  (467),
  (468),
  (469),
  (470),
  (471),
  (472),
  (473),
  (474),
  (475),
  (476),
  (477),
  (478),
  (479),
  (480),
  (481),
  (482),
  (483),
  (484),
  (485),
  (486),
  (487),
  (488),
  (489),
  (490),
  (491),
  (492),
  (493),
  (494),
  (495),
  (496),
  (497),
  (498),
  (499),
  (500),
  (501),
  (502),
  (503),
  (504),
  (505),
  (506),
  (507),
  (508),
  (509),
  (510),
  (511),
  (512),
  (513),
  (514),
  (515),
  (516),
  (517),
  (518),
  (519),
  (520),
  (521),
  (522),
  (523),
  (524),
  (525),
  (526),
  (527),
  (528),
  (529),
  (530),
  (531),
  (532),
  (533),
  (534),
  (535),
  (536),
  (537),
  (538),
  (539),
  (540),
  (541),
  (542),
  (543),
  (544),
  (545),
  (546),
  (547),
  (548),
  (549),
  (550),
  (551),
  (552),
  (553),
  (554),
  (555),
  (556),
  (557),
  (558),
  (559),
  (560),
  (561),
  (562),
  (563),
  (564),
  (565),
  (566),
  (567),
  (568),
  (569),
  (570),
  (571),
  (572),
  (573),
  (574),
  (575),
  (576),
  (577),
  (578),
  (579),
  (580),
  (581),
  (582),
  (583),
  (584),
  (585),
  (586),
  (587),
  (588),
  (589),
  (590),
  (591),
  (592),
  (593),
  (594),
  (595),
  (596),
  (597),
  (598),
  (599),
  (600),
  (601),
  (602),
  (603),
  (604),
  (605),
  (606),
  (607),
  (608),
  (609),
  (610),
  (611),
  (612),
  (613),
  (614),
  (615),
  (616),
  (617),
  (618),
  (619),
  (620),
  (621),
  (622),
  (623),
  (624),
  (625),
  (626),
  (627),
  (628),
  (629),
  (630),
  (631),
  (632),
  (633),
  (634),
  (635),
  (636),
  (637),
  (638),
  (639),
  (640),
  (641),
  (642),
  (643),
  (644),
  (645),
  (646),
  (647),
  (648),
  (649),
  (650),
  (651),
  (652),
  (653),
  (654),
  (655),
  (656),
  (657),
  (658),
  (659),
  (660),
  (661),
  (662),
  (663),
  (664),
  (665),
  (666),
  (667),
  (668),
  (669),
  (670),
  (671),
  (672),
  (673),
  (674),
  (675),
  (676),
  (677),
  (678),
  (679),
  (680),
  (681),
  (682),
  (683),
  (684),
  (685),
  (686),
  (687),
  (688),
  (689),
  (690),
  (691),
  (692),
  (693),
  (694),
  (695),
  (696),
  (697),
  (698),
  (699),
  (700),
  (701),
  (702),
  (703),
  (704),
  (705),
  (706),
  (707),
  (708),
  (709),
  (710),
  (711),
  (712),
  (713),
  (714),
  (715),
  (716),
  (717),
  (718),
  (719),
  (720),
  (721),
  (722),
  (723),
  (724),
  (725),
  (726),
  (727),
  (728),
  (729),
  (730),
  (731),
  (732),
  (733),
  (734),
  (735),
  (736),
  (737),
  (738),
  (739),
  (740),
  (741),
  (742),
  (743),
  (744),
  (745),
  (746),
  (747),
  (748),
  (749),
  (750),
  (751),
  (752),
  (753),
  (754),
  (755),
  (756),
  (757),
  (758),
  (759),
  (760),
  (761),
  (762),
  (763),
  (764),
  (765),
  (766),
  (767),
  (768),
  (769),
  (770),
  (771),
  (772),
  (773),
  (774),
  (775),
  (776),
  (777),
  (778),
  (779),
  (780),
  (781),
  (782),
  (783),
  (784),
  (785),
  (786),
  (787),
  (788),
  (789),
  (790),
  (791),
  (792),
  (793),
  (794),
  (795),
  (796),
  (797),
  (798),
  (799),
  (800),
  (801),
  (802),
  (803),
  (804),
  (805),
  (806),
  (807),
  (808),
  (809),
  (810),
  (811),
  (812),
  (813),
  (814),
  (815),
  (816),
  (817),
  (818),
  (819),
  (820),
  (821),
  (822),
  (823),
  (824),
  (825),
  (826),
  (827),
  (828),
  (829),
  (830),
  (831),
  (832),
  (833),
  (834),
  (835),
  (836),
  (837),
  (838),
  (839),
  (840),
  (841),
  (842),
  (843),
  (844),
  (845),
  (846),
  (847),
  (848),
  (849),
  (850),
  (851),
  (852),
  (853),
  (854),
  (855),
  (856),
  (857),
  (858),
  (859),
  (860),
  (861),
  (862),
  (863),
  (864),
  (865),
  (866),
  (867),
  (868),
  (869),
  (870),
  (871),
  (872),
  (873),
  (874),
  (875),
  (876),
  (877),
  (878),
  (879),
  (880),
  (881),
  (882),
  (883),
  (884),
  (885),
  (886),
  (887),
  (888),
  (889),
  (890),
  (891),
  (892),
  (893),
  (894),
  (895),
  (896),
  (897),
  (898),
  (899),
  (900),
  (901),
  (902),
  (903),
  (904),
  (905),
  (906),
  (907),
  (908),
  (909),
  (910),
  (911),
  (912),
  (913),
  (914),
  (915),
  (916),
  (917),
  (918),
  (919),
  (920),
  (921),
  (922),
  (923),
  (924),
  (925),
  (926),
  (927),
  (928),
  (929),
  (930),
  (931),
  (932),
  (933),
  (934),
  (935),
  (936),
  (937),
  (938),
  (939),
  (940),
  (941),
  (942),
  (943),
  (944),
  (945),
  (946),
  (947),
  (948),
  (949),
  (950),
  (951),
  (952),
  (953),
  (954),
  (955),
  (956),
  (957),
  (958),
  (959),
  (960),
  (961),
  (962),
  (963),
  (964),
  (965),
  (966),
  (967),
  (968),
  (969),
  (970),
  (971),
  (972),
  (973),
  (974),
  (975),
  (976),
  (977),
  (978),
  (979),
  (980),
  (981),
  (982),
  (983),
  (984),
  (985),
  (986),
  (987),
  (988),
  (989),
  (990),
  (991),
  (992),
  (993),
  (994),
  (995),
  (996),
  (997),
  (998),
  (999),
  (1000)
;





DELETE FROM sqlab_msg;

INSERT INTO sqlab_msg (msg) VALUES
  (0xb7f34afc2b9facf61c5b76e1071ac3e42165f495fad2b84fa751313f15ddd7da3eb121fc254aa3556f2b7b50079dc8a8a05f85bcf8fa50e64d311b75a1c300e19de20ef20b5320b9f534d6dc4ca9690fbd893d52f17a29e7b5579927882a46fc098f056c956dcc18dd55f26cd426b8ad4c5d72199aafe6a0b7c79413080cb29371a5b2e658b2f44d0add782b097f4245711316fa5a5026051c596ece57347c9ac34e0408875b8aa34075fe13480f58caf92db79caa5564f56a4ae87b692da5420f6479997adba78cfcf7929bc163072c1e392fc54844523eb367fa95404593e01f6f6778973967cd112cd6dea7d0906d6a27b1ac359f3e4a08922101aec645da19dee11b3de84b0f6dc42a1e44f1e8e7e42e25de416ceb6fb6f9b34f034f3cfde3c2a6bb1dabba5eee3965c817088368780fef7ba3716feee9c29da6fe8845e4495368e4f17e1345711877f314480d6afb6b48b78837dcb93f0781ec07280e68e7b2ad13bf9005f5e19c656dc74d64b4bff81426cd5fd30825d975ce2b9fb4c359c82afd96a51c71b0cee202d7cd1d9dbc45404b6eebb882d8bf3550da1c24ce354b3c05b8f915c4814dbce50f5ce9147d0c124ccaf21eca8e034cb2d8e7284ce77e46b9f3be6ce9e4b6fcb522a8c1443932fddf94224d63ac5e5e809cbafd827e05b8dddd446de2ab4121c2ac3aa763),
  (0xa6a0d1cc75d988b94e24746110a3388884d90791109ade1fbceebabc4315f2dc6f57394039bd6d4641a8aaee3ed33cfc8ec6031636175a36cac5c8da19361b1b26405c57aa6ec98b096e4501097c5e78f228d6af80f692f99f1818fa517284e1be85a83ff55b42790886ce81f022febf8b1a3e4b3dcab24bb7c2b326f10a9ed3ea74f7e8028d74be1de4a77ad172c13ada13b7a7fbe193d2921a3fe41dc87b6a6e5bf285037219ad06887fde4ecd72767f0b973d93a602aae1e95672081c7d35f724dfc89dba2907a17d3f5bcb599f3b76f03296744c1cb7f658a2a55b1fe2685240d7253396100e9a38b3c95bbdf6172c26df8d8de848bd152a05b8edd6d4ab081de4d30edf97b9984cdce282871d622a39f96b1c625007194ad9361fe8f85e4e8e242fb0f59f698fe9205b4c5472d0264862aa69ba71054a7110dfb8fd9c74a0d925ae3aac4530b8d23920264e2ecf453f93973f227efebfdc11706e53cb72794cdffca7d0f815a26f8b0737f03022e8ddb85dd00e7afdbdfe4a6b433ec46127e672a75fd8602651c51abaea287073f1323888a9d4f3268686bf568ed7cce5c24eee8cdb9eafa8391e06591180f3916d4ba5a07942362dabe03e0e92a3e5fbc38b129c7577128258e66c644ee5b98a95665b6309abea9d2b94879a4c772eda6903ac2c931ec2e84bd11d0880ef919bbc8d99b2c7cf088362898ef823274a36d8c98caf63c3c1e3bccd6e77eda0ca0eb9a60d50d26142865c038b28edf6f47157630768e642f8929809077773447a3afeac08f26b6cc4bafba2bdd4de96f9dd40ce326fec587a65eb74456a929c6e43c00e794e1e2faef2850148ccf596558889548832ebd52b66aee09c7417439da727ae758ec587ca1577090573cbff78077b19787f20a393e9ea5e0a651edef0ce9a36add14a1a4d6bfd4bff33ceed1c57e5bd02f12f93b848d518b916de74197a5bda7e7c0bde91ab9941229810364534933b5bf51e41a62f684394c48b3f37844829c384a5a56e619590c6a5ceb707fbf612fa560667c36b9a5756e3c3d33e0e7059e1d3829b354f312ddabd09244b198457dbec13f95aeb37aaed3361c63bc766d4c5d7044a7bdd440531be23e1a3bb2548cd205d22b5b617b5a2fe0518b1ff9d8832c9df551d62c9c58562cedb23caf254dd8fa54e7e7fe6b1b8edc858948b19603e1e3a41148f5dc56dd9963d67ab893af83ee8ea50f4c104c056d98f88c653941a61be0098a8dac1fc96fa215689da2b1190c8ef5c9b7781b06de51805b3f16f3c7e2a9d3a8b3844359b5567815c6ad8373bbebb480f3dc5a7f8a7bc6dbc),
  (0xc8bbdc08aa368c688cb19ae1130fa11d8c233fcc4fe8957c7fb5bdb5cfd09821b7497489d36fcd3606253ac5e6d1e659c2b113e67d2e9e582a3a46fff3f918a8c233f3dd42decadb47d27fa17f0c228db9bc1089720b83d5ca8a776b5fd107494cbcf811e150b9994373884bb1485053e04aaa516f4834698e37644118685a8d65a7bebe51873778293a5997312579e429746cc7fbf871379d7d09f2d4ddb9bf5def3430a56a86ff5bea9959a63413fa20913fdaaf151fb7bbaa565e2cd1bc69f16cd61fb7ca73e22a35830a2f0f7bb7),
  (0xd57f4e9ce3482d1d3a9ad12873b491c705a96cc92a01a1e1daf62bd86a28cf38015798485ce579ce9257488103c68811014d96f3414d289661a4fcf1bca69b558d3d975184c9628ccd4de9bb079d43948e2798036ea5991a3ee598b954a88be0a5af8aeb973f39c84a074045b50a8b93ff04e86ef6a838dc912226191518fbc9fbacdf0272a9de0cf608688e784f0fad3f89ff67a321670a9f3a783206a213c6985322a9c2481cbbc7a12b83700b70040d436e9d8fdc037964a5e57b6fded56c5702b18810325e4a19a6e8f27be2f943d737b422620d8ad61547a3669f16db1fb6cce7a24e80bb9a2ef05722ea70b25b8097963b2c97f3fe471408c4d7054053698494b49aeb5e7018c9a615ca597ddade5305a5e795bbdb10c3e602d69dbe9692bc2aeee3ca9b82d9f47f28b8bd21ecebac102ffefb018d4f7caf15788589da055c24371ea08c5cd967fd479ae4ea5bb7c801824acff06eb4d2fb41de93b60d6dbeae017cc900bf71fed043895985e8083cdbd50cf1470f3f0b045fd84508c9eb9ea8d8393d0c53cf137c2db82c8564b7e4aece90c00c1f5567fe7f3daf01eac119a528f04d254c099246420746a50c9c32f4ad78af958662cc135bd29a60573dc8e0e7be01adf075d932bd1b3a01bb8daf1897a463f1f3e220361daea580e80142823c4472ffac75bf8f3302efbc6788db80411d01f1aebf2311d69ee0ce8e43361c46e54e72aca99d559d7c9dec3632c6932dba8f9cf8f74cf23a77ea197799bc17f02a35b2207df7441b749e08f4),
  (0xa90ebed51628debae03f64bd39d00436962bbefeb3bc41eba759c00f6eedd12e9251ecb59bf8cba7a818417b41645ac16c1f03011b0ad9bc42c6a319e99d8a24396526481a4bcb956ffc1ff7d22caf18dab14e530a92a8305a8b2a8f93d643f7b930ff6693a950a3d7c785ac095a609f4b9da6092e557c7197d8a7af9cf52b10af61fbaf41bafa91159f79ae10fd6812ea7e75a9ee366b1af1c4b6bbae3fae35793fb0d562335b38742145952734a74ae24d0d9dc33904bf76dc02ef86fab5c5c5e51eb1c22377262cddd664ccedcc460726b5485fb1b69e1c4a80b03743b96153191eed4d9322e489cd699d700937c7238323813f0cfd82b0078ee14b9e09c8b4a3f447961688d3063dad89e5a8b21e13a5ca3f3bdf3be5e4f8ce873869b5e04c3453543b348c47afbd5bd8c20ec231658696afaafb0b814a45e7bbed1028bf001533952f718e1b170ab187670301617c599fb87c8e4811de3fa03239f4d0b1f07f31b58bf66ede5ff144d5b5f4d043812d71cdeecdbe8bd4ec32f2461c89c9ca3bb7c65584d57cc524fb0f46a4ed3d5871b0053c3e6363b8d08264276cafe9329a045dae896417aee22b5c78db0e92175b6837420465b57d7674dd06358ad98bb769fc9fe2b617065e2886e99c71cf71108a0eee6b984450b7469e74c3f830d1f2765ca8647143799f36ae053c045d7d59a0e3b9fd437370c04118c95c2c69143b63fdabf4e520e50c3fc144dc678b7ed63b9287416c987fde2ee470d3f54a245baabdeaf59971360c291a229f1a45c86ca3e9edb16cb90cd18e0ac738027c28ad14b306a3d7dfe266f57a70a76d217e179e5cd02cba4654b2e11539bbc3dbac6e6a725d163626eac874dc95308311da91a8cb4cf25f528a91fbc41d3ab94fe88d2e450b75796bcb9088d057c52b34896e03db03f3c188ee06c52d15fb7fffb3122b008927bbf2d137a5ee191596a96965274c6031414df4eb861b1c0f19d705c97f47acc95e458ff45c96d5254e74234e3683b20f5820951054ec5dded33c9ecc303c872499f94c8d14ef7739293a6e11170ea9644f712a8ed313086bc845d7b489e24ac73c332f9643c2833c09ab3ed44eaf48cbda36b025e4943f8d87ab0a6f629da15a456d2c93b70d794446844d780f6371c2b124825618fe55724c169913f8e4768af1e037a283b9f24ef867),
  (0x2ba6bce08708cc24ea11cf733b0e06e6f1429802de1efdeb389f70f850d3b8a18f06d69fb31d52fed92bbb411946453a49419205e1e561bd9120c9504d663ed241cda08701a3a99ccca0dacad9f576567e785ca582641a22adb43ef66671f96bb38bd661299d3796c3bc9133accb47df931ac1af0d19c5b2f087aa32823d94f4d1dd608a6c17f99feaed300945b4ec1855209d1605b13eca52ac641457cfb5c331ca0dd7618255832d84c5021db16aa81ec5dab2fbeb97bea181a8be0f3691c225b2c013d050045b035af4eaaa3f7b723789dc316c66ccfaa937a0f366561915a6566a2502f02b9b1d998abaabd1976cbaf3cd6f01e950e1363408a421ebec794a60e412303fcee6713abfab702c5e276b035449bd00dad5f22ce91770a538575143bf0596060e3da124d386fc5afec3ceded34f07e5f63a7c672694417b8d755445882d5a2eece51d0ccbf67ec8f3933dc39bb870cd557ac49159e17c53a2ebbb89a2d68e2cbc7b9b6fc50dd89728c0),
  (0x370a9bf7f9cda60c36d9f29c74454d31953ea935c6cd3b8259630b6ac1df8a84d6aa1aeb2d20e31e2df48cc7e83602d9e7b0632435cf3e2b65fcc8624722a0f777f24a2d68f61bc240da47e404979ebde148ccb332fc6ea11b45d95a264deeb7d68539e3c5bfea77661f6e7c905110c9f767437be5828aa1aa47597acb07f26cf50e24e07a31c413b3ef7a9bd86e9a1173bea8a1d72f542310edb878ec50ea48598fe37ab0664f057976f8ac4d69a684398e45a7dc45bc5bcf77313500ab0171),
  (0xdb57f3a158ce975c429e6268ff8904bb473d30d2a79bb4564a83fabf4022245496cec3d1f56b6115972543e6eed963748ece715fb25ce2b5626d0f630d693ea063a7604a6e12f829f5172839ef5b84d86aa91e668dc234091bc38ee936f162750c994b0b4cd954cc1beae07319c4c0ec25bff9bb5cb12628064240dd3828077cc911f7068ad2733bbf1fb798bac887886bd71536cea237a106e526ac494931c86a5f9e36b54626f83defdda61a3579cdc8b2f766689543c09156144154bad143bb96d2eb1fc039668314b6e409419780356a06f69e9962a3325d5439edc445e00b3dd78afbacc6fb3ea81e265d486683885202d0d3551349cf51a54c2161d7e57bd76cea0fda2d52be9cc91fa0caf554),
  (0x24572bebe5510497222a47b9b15a171ffb38c2c8e1234faca98823f76375f4585b733666475a78f932db0ea8bfd91088227de35797cbaa3fa4326a01eb2997b59812d894299d9d58f6cd16c0a64cea6d60caaf8f9b855e6b8bacb8d9d45aecda1c04b7199f2702d2d40d0a95bb99ce88ff31e78802a963a51f51b5cd61631039ef56520fe0eca1bb86e12e8f765805d4d67393ba057020c8f6bc13da5638f786dc94fd1b1b6e3e7dbc43012b141881640a01309166fa49960130833ea8d19b93),
  (0x9fdf67205e098f56c5cc60bd7c188d9e693bebb0d961c15105cb6e77818431c09d680e0a6e54b49b06d2267b76215fe0400901f91229079fe684bab2804d22e76f35b628c619912c08e5eb0a5fd2009ea84edbc0414b42a7262f0d4e542d0dd549729aa4300ae02367853bfe2cefc2ac91eeef2842088960ae3298a9158c75934f176b83599aebe97d034f4ae55e2ca94cb4c20949ab824966b3eaecb5660a5974aaf1f8fc4144acc570857eb51ff76aa4bbc73e76b5cb865a4192de4477c56713db572517a0ea0440cdac6c58ac8f54b74e20efc7f87115b9037ad292c1d4cc58a2baed391f0b9d99d833de2cd1b5add3769647f6a2092e3d05c573a4e9ac18cc8f5307418cb7ab06fdbffa281d09fef39e85f9f8f8db37f7bf12241bd8e2e6ba805fbad392c941af80c93f1b0e5664fd3e07f62ccec9d427b87707807704e8663426654b18cad221b8abd42db02da41c4b44f3cff976aa3e2c31d38bf347634c8cc65ebec35a333a81b8d6693fe373bafc1651f6ecac9ac81e97761cb67366c9dd4c58a1536cfe4d3d564b61a633f312104062ca47c588217af5420fa476311508c3d93b5560dbec2e96111a00fbe0c552ef8f891cdb68ed25897d387d404b0e90adb4ee242007c94e30fd63f86450585a4b7a0acc9232a3b99cc793041800fbb251f8185fcd636547508948d4006dc13ddcaec5bc84086d70ac65d86e1ac670d20f061839df504b518feb31ba514688f252d96278690976bd1bdc1460f2186e41cdf60da742ec2f9521b8caef5722b962bb54da77b6b5a3b3dd8f9b1692da1d28dac793cc06b888a1d6b6d3a58892ef72564da222804f47e3e2af67e488ceba69d313537ec638bebbd1586afabe625c58008b123dead0ee1534645404df5b),
  (0xef39beeaeeafe0e3458be2d008c43b2b2cd1e6b7783efe50099863dc6288fb266ccc9b716596197e9eae9408404fa3c55364e7d36a2703f7eb28397ba7e9375d4755180995152593f92fb7a77ba8892581881aacc540a1b13d1ab42333ed3580ec729522feec793c5816b5ad55ad8b983182832e5ca83c459da0c208c157a8c40e22cf047a9fff1ec7fea273354703daf5fe70f3107908e3bd0713abb4d0546bd0aa9c93fcbe47379950021c8eb0644e917e0b5f354d4c838f67374feea2c149924a84df5144135c97e2435e6acd59ce1c2a1b8fb00ad9ab30c2720471fda47d87c56200cad26b781c36ba82602ae628ebc21219fdb367ca9b3013f0a5eac9df47da2eab52f112faa9594308aca7b260af17e9c79b979c8c14242832d7c1c2f1aa3f811a48c5f3e19ac07f4c588ad7d26db547649f8b67753b317fade6a00b5e5c1c0389f0db93e7392b65053f2c9eed91b41c36fc5b663fa6d0225d4c8004051270b8ad43690189a9e65c9fc60bfc1f),
  (0x4ff9cbe4a36c5e8f85896a1f054da21bc8d6c9fd87e3eb21f133ece1ff99d85f6856ade25a69c473036141ca7e961ede2767165545ffcf58605d00a7e6addb994a7839f59adaacf6b71fff9a8d958ff6e23b4665af310aba9a5ce7957355868638f00c1c4f9581a73b9c4061d0f69cd99c744bcdb2356783025875e441a671993391b9d39b36fdc493766aaa03eb0fb1245f4166acf917e6aa65dec4217b38c48018ee8b3abc6ddac204cc943fe88c79a0114ffd24b477a7c01553bb85343c07fe15f4e99fb57024b8a0add8c6d14c8a0018cc37144bbe217c2d5f1cd2afc64e15fed36cdecb142cef8ea4f08b958e388b7efe96e5f4eaca44d1722edd79e35ad86d8487c114f90c3eb6fe7b1f31e408b8da84e79c2e912d21109c6ea04ec9a62193992c07bdfd528287d992ad390d226c68b783d9b25a71a5128b7a3145285865f3bdad1fea4eb82513f8d50fe63f06e98ff4db006f01c87c982c8b7a33e5c2),
  (0x366f717904c994f6b2f2c168a49fcd2406be5f53ca5fb5a7b365e617ee991d5855f5c6dcf90441a61cb323126baf6882678e4c0f0ab592621d4f4568d0fdebf0e1d009b3d4f52e561a67229d8c1c5f163c4bd3b4516a6ec5454f8abfb100f68a6b5d367b419c355cd0469f8f1cc52514f01ada21ad93503a6ac5a78018b73b811b91e6ad89e6c7faad363349c4bf70987d6feed482f26d5170bc37bf7060641b9d96f4b48d4ccac7258b8d7f37cc38317314f226dbbb0ce0589da423e28db4a90f4aef20bd25ab5cf3092f30f7ceb2fb1ba6c47481034754d74af9729d3cfb52938870a40841e41563a88d121620465ba199878f8d877f50dc72b2d72de94971),
  (0x64a99480a1d46354cd3db99f8c04680400e8b8a9690cb0efda0d49c82c22d5978c7c570d07550dbf73c97b23322636b6813d570488341220ff91fbc1720478f381a83faa33207b2b3f75ec45649ad5300bfe063c6a1120180fbcb27c58ad5f31b03cfe9fc5d216346656926123220b3c20ad866945ef27e939628f614c4e39dba46eba5e9ea176b3226cb7d3d50a86bdbef06d60175e9ff1f85cf4bcfb10bfb2f3e09033c6826fc5398fa5863d808a2ae4351f0bf2e0f34550d4a99e70ffe71f10e10f353d0a0339f74e0276eab9899891e90150bfb93b98c37ab5711f08168ce059c79b2203375ca61f6765374ffcf3f91bc53a49aa30983b4dcf42ab4f12871ea68642852491169431479cd1f7ad40901bf767c5db9275d7c94ba394d1501811138925082cd0e9004d07629346655f7410be584a003987a4759b7679eca73fb0364b3cecffaf2a01c8085a26547976313f1e35c1555e0560a88c58a99d3982ecbbe64d04c8179dd92c817a8d697d2562836ff94340f2ed306564731ab7da207f42404771c524019f7f0a3aa80094eb96de322593ab727cb390737b3680f84e8044e579e9381ec5a4478a6c6345959017a0c45df34aa67847809a2c14ff2e80dfc323ba9a31165de2e0c2d89e4f742b9e8cc8c83d0d637213d62b4be72a0a627d62d2f0f9782cc877597febf4dbb2983dae688f65c8724421ecf0419eedea16e2144af062873c944f7ef12357ae71abff83a50ea1ed4f9abd24bb02be528b14e7e63378e546fc6ad57950c6fc6a8c549376ad62c037006ee632c9196a30ecafc3748d781efb1707b96ca01ca678e82cd0a10a03d189f6f0c34b5271943e924bc5782d04a91b8ace1281aec19653cc96dee4fc73a4c17494079faf12380e984cb28dae3e6862a0e8b1f5f77e370b0614),
  (0x3ac0c6780464c66f4b0c75b75d6f7a3911873c21fe53f3ed8d6d228e2f1d3c5a3fa2ca4fdb6c5cb56169777661403c48e2bcb91b9a7349e5c05e073c9b4808c31fb5a7f8a030ae8c55f4dfb0fca17dfda1abecebd0004d793ad46cdebc3fdbecf0d142f61d14435c0f4a8f25f185c2981ef6e91f4e243aa3db8584857bb2205952304e182f982e73adf6795ec45494bba3731bceaa58d36f7634b1541e24f7afc8d14539a5a28cea447d3d624089eeaa57fd7451a270de86c34a5ad0b415ec037a7aa4a26e1fa738e1638dddf093dfb4b0c13c48974e93f7d953b1d08d55f147d5d77384ae8283fecc498ef66c522d128ea25d3d7a56dcf18c49817160df2ce46799f4b5b3d9bc3f26448fcb574b56b0f2f258ba0e1717f6c95f7c214832180937293f1bda4a636adb958e3a4cf2691d8087a9e1943b8a7375084e3d23aae2078e99a994c318811de16accea9ffe22a53dd23137ae0dfa2f75f116156cbd414631b984cbc99d0aa310ad018e55fb73647a760e2479251ed858e9812cb92cd803),
  (0x365548305076599d997caf6d6a4a5172dadc4dcbb58daaeacbe8f8cad7e24c7e258c318ba32e1a5662865a7542ad91e239b6cdd4a64e8d54d09becc8b47a5675e7382fb5aa4e17335ad67493c419e91d7c6af95f6a984665f66d95d06758069a67c66702ada4280163f0acfd59caa542ca9b64e71930dd2845d03442afcb5f9eb8935b9d8faa7173c012063e5991bc40d471d269454a774de0a47eab0dee5849e2e10fb96d1d6bb5a04dc28bccf26cf4d03c53b498335cb4527fbc60fa6a113bf3376b1842cffa71823dd4d3a99bf2de92fd095034863b5bb2c3ee810538c146a3ed973b50f24eedad4d9c8f99ac624266c62cf719c7f332f4e66c5a411651506488dd4d28150bb59a2c2d09fe85857d73d010b9c4fb4d91b38a4601c1dc004415e958988be84b93a10bcc1f1bd4bc24f2fc924dfec042d97f8e51979762e01511b156ef771b39483ae0279dc62a0fe2f7786f06b7348bfd3c4b7283a1ff50d9c550d38f62aca5f2dbb8766502be5043c5984b3e24c34fa87b6e94eb714174562d80c6fe650b73cadc21098a3bc2a08001f32df2228a715c88de92cd48b57fb340c67607a58638d02a727111298a8416ef15f6f4bb9ed8b5528441900645dc516d19a62da1f2440f706d894df5047549fba0d6006581413c76ddf3b37ee34c97b9ea2a027c0f4ffc23a0f84f866177adcce7ccd953017aca944d127bfd5bcb6131038dbe8fc5be46ba61607dab239ce055df11be9d43af03f79d76b390bd727c109c12d76126a77172859ee5ccce31fe),
  (0xbf689f93c91a47d2bbb6680d79dc4da091525160d7eaf72899dd2f989a9bd1187ee68e8acc8f2be58986701a812ad4b18d39b2a8645c9ed41b9a7982d66fcbac0adc17b46c86bf6179b1bd95ee02732c85d4dd119f8dd58a329bc63e731851787922520b582684e2394ce5f61232939eda83b39731addcb7088acfb3f551ae86ba25896313fe0500566a8f17d676ef0da2064e281720bcd9973e38639ba8cadc387a958574e982389bdd7d3578312d18e3ac774b8b142e602680989bcd27c6c5a25cbe98c72857dddaae509ef2954a0febd91a6a88c4d2bc3e97b99d9a3674cc3cd15e2a80044e3ff04acb431f659c2f19caee4b17bfdf073c5b89671cf2f4039d98b71f6ca079ac209ce73b526ea5317fb7fd78af358ace4034443f65a20a43a3b8bbb46fa1d3e38b1a9e650b514b6ed592b6a71767b7d7cc20e4f8ecbb5c3161cede3db45e08bf7aa48ae3aa10bac392469d37f729453bc1e0f5b1ba6df218e6c76b3b9cf95214d692d13bb569608a3f9938cdca234c61106d57e779d4aad74ff8c81b34927f6dad001ba3dd59750958d623b09c3cf029213336562bf1eb0a1d04234f0112e20a30512756e95962e8854ce996ef72cff83a3c9dc494833c351e3508d5f50d93c175465e5317b2230dbb124f935c34d6234131a94de7ae95e3),
  (0x01a8744bb915dc4626a00f190c5e7c5faf90cc73d877aab03512cbfdd221d08934f53a680b4bd4dbbac787e57841f88054a2a1e6db50f7b6fd1119c6f77309429ca67af6e495d380e57b6ae17c332603a4a8b0aa9c34b277784d06125eb12ffd22d652d2b2eb80f080d1abcc73683ed9221049e4044e294344c3fdb47a5f8f61bb60ac441b15cb85cc7c0d7b6eaa5f7e50895239449a45b1f72b46efc82edeccfc4056c26a7c5022ccf19706e9a4776ff3550d8c4f4936ecba9e8d3b6b29fe7c3ca79e2caaa031517ff1ba5ebeaeed64a5a28df396fca4e15d269421381258d496246f6fec50a26263e68cea3276d1e3da1552e660ac96565f5d7109de455c626c855bb96ea1a6eff2cb910645b369b77dd038ac8e4ab75ce520a1346a5e73540ac1ab564346dc1e20b233f046bce6e5a7a0229c1427d2afbb137776388d498d0a338af5d17142148cf141b92d19d03077de5963fefcb98362ff32b22c1d9d293e020ecd0181d700085d266e852cf3519f84741abe87e298f27e3f314c0e37fe47c39b4a37b45cd204c983b40c949a9c261d52c0f8c90be39816ef9047808e8e98dcc79165186a0f04183f3394a6d7d71b61753b7e65609165e24698a7ba6093c110ccd34ebea275f13b08d430ca4f37df0a492d335c5b59f928aeac688c3dcb1700189716807c9b3de4abf01be87130cd9e39bf9e29610288a99610b2ba1d200c6f059c2620c4c6f1b20357e398dd37d99bf10e76aa3e50bd83f539d36e76f30bdf8705e9c9685aa93ba4a56ceee1e18ef170abedbe0ac4c3192496bc15d32a33f07bddc1919f40fe949633d0fc70c067a47ccceedf6e64832fbd856f6f21ddb593fd7a29190266abcda7b88a0f56a5a894da6b89ae917dd810c75c57de5fe57f912ee2133d6f49790d979b4f821a14993b9630c06d865b763a681a6bf6d201e25eb1705e8401c87b32dd8e9f020a48),
  (0x551660bcd1710b76fe42a5e0deaf623d628eb4742dd3bd4ec764fcddaf9c827afbc1b91037758ee69221b053dcb7902ecc881bbc0ef8d69c3d8c415e2bdf04e302a4faccaf4107f35e840fe58839f81e7e9340eaf4ee2b7c64c2a602af8baffbd4b4a7eaabcb99a9c3207847d7f71eddd01b97a7eb0dab36a351a0c63219e1f27f89cd2fdea3c92c4672e6726c40e409d3476e98ebe5a8183a3d0cce5ee09a7e27134417bd4d2ffc997f3c789c6a721799eee14c4b0240b39ff2b950409fa497841de2c64ffe32b3714b029e399e48605bbc8a1f22a5cdc7ef5480efbe184fdfae3b16c01f44bea425a3583a95659678480bc0e513f3caf38af85110ee34c7941b7ef9dde3cd8679c72b3225de1e22c72a87bc8c155c1889f2b63e71fa10d0dd492ef7e101bb43ef89c437ff14240d0802b7d440c73d28ac9e2094a7be0df47a42f432b57f196980023fa2b91e5cbf74d77ea2bd394c9962a71de3fb2e814b2e),
  (0x1c0c9bf26358f68b116c82695fadd22b06142f54d468995829aed9fcd112543a8e1a585ef1064b8c2685977d8106d20c9b70aa8adbb6824e2b55fd828461b92405205f1be80cccfb6396a8a91ae8e2b8b5f1e7ca006ec4642d52d5a0b4fee11d3b3f15e23fabf831e08d682e48ed7ceeb2c326c7509f0535d7896451033e9294aba3768448365a869e72efe7d04573b8368daf21c094147b72ed6d175a0d461ff1f8a4ce37d2ee37c23d37b16d5aaf79),
  (0x6c1b18bfbd1f1bb12051728f17a5f5a4e419257fe0ad3edb73fcdcb34d3e21ceaef252bc2b38954dd143b2cef24674bbee878cb01bc55bb21d8ca170dc81296d63013726a158ea0cb6bfa53e3aa2d4ce857665e8b48c0ed557312a785fce1176c11f69532522e650d3c46fbe6418eaf5d9048007d5fa09d81f8c0720527b7bf6e26f314c6500e432947fe194e1a8631ae54a30022e492bbd10a88fa0c923c3e46b213c3420b872627d65ba586246fd94),
  (0xba543900e522728e29179e31c95491e5d110820628576c629205f63d0f1ff33d2e22a64113fdd81aa2768c9918af87e4a20bd5155fb3ab1d5386b6d045076e952ce54b5abaa4d8f4d51b5b5ea8cb36ddf3d662d59e775be1b4f8c226390e3645552d71defe6cbd22d55face01cac97bfc8588397ae841a643f49239ac0922572e65b838fb847dc2e13fde62038e492a7e57fb18e86f02e8af72309414f68b2f20c8aab14c4c02e660f8106db80b4e1ba0e1fb6840417001f374081060ff946b0c82365d90741918727469ac3b0e6410c2b4ddbdc4256d7a4870e43abe239f938e9f64caad12a16dbab3eab147c9eb3699cb40af20ddb74dd34c73865c635b6d3fb46967f6de184ae8246645b6e1778ab8c7d3e8e8eecc7d30f0f2dc3b7adb1ae6e45e75db0df821979da7564cf080b07d417f1837ec4bb372d28c66ca7228af867faf83f5eba72ce83d9f6cdf0139d94bca2e11339490e5bc5f979859acb8a4fee6300cab40ec2f23f36532684f6d41ad3eaddddab42ceb2de3a38d5777a7cd5eca5e1761e2d0b4001483af0df8e7771d4dc7466d7c1937eea5f43cc9c2c7bcd9654e4931835a42598b7bde36dbff7287408e957d5870585b362adaac3eacb7e50575d9bdf1c3ee98808c237192e7837445ffcd22e5b2f2805fbedf58f2659214653a0c3c6ca6b20dc7560c024b9d3e8dcfbb93f10938791ca594c42b5570ad69bfbb70b78f5b43ea64cb0414548e1d2b8361bea76797ed2d8252c67be58856e73c1c85fc1e1da39466dd0ec3c47622b9721d9097b38ed71bfa4b3b7f4edb19f),
  (0xa552fc86937f5616ebaaf76d074dd90bd578b4da16a9f568d17496e1dd0a80beaa1274e31225c4af1416621f17347f244b0e5e05a7e75c66b4a9e3debebf3a33870b1294b62fbff0d2cd8b21591af35c7d87a9ee0740acffe1e560262e6e5b77ebe9d42fd17e1cd4d5e38e6af0f0294ae7b9a2eb9b22937bf50c0309f9c352da1d8f2e9ba9b52fed389359dec67a20b023dd9c6f025d2086c1c618b8cc4832627460d3ab9305441057b4ea6a38513a29462b770e37ffa8f5c6a92da3ff6aa8a4e926ea0619696201dd38df10f2e3deddf3d616daa4c1cd18725987f810cd32e428142adb156f6d964680b5da65873d0e83e2a7d0d62980105bccb8878d3138529e3cb5205915a457db030a3217c7fc884d411037c16325143b1d3e4ebbec863bd713767ee9338e6a8ac2d23b2ab927a1773a46b9140773e2cb4e4ed44a788af243050c9515620a573b220abc2f071cb3d2464c902537f9f7f312c4770ebf208538e6e507ac3276c3bb55bdb7fbecbd22979a003d062f7540502ec98879460e552bf558e628950124d2da64639f6ac734a7c5fc36c255ddebbb575395f85e98f6f775c8bde9c460d0e8d1a611e90628a567f627dd9812fce4ca49d31033f1b18a40b14aaa462f4dca94c647f66187e85464fdd3bccd832d2ef1cd59705f5e2f1c55646b43d3b4728b8d52f690828ec54f6d0fa3ac5f6fd2c9ba21f0ebe2d359d5840ca4fd84ff93f1c692efb5d7e556871c73ca70059e8a3079a14a1cb2bac49cc08a2628e1fdddaab49f106f1566ecb3ad57829bb92dea4f8adbd68c63b35dbe0729c1dec7bbbe59a8471bf4ae0aa7046f2f7f48826a6e0797ff7cb4b4c9fd4c9bc42343166a770afed9da96061ee4a2a2b86247149c21ec48630d0724f0c9f4b9792d679b729e579c2d0aa37068367c24c1621d1fc585f82db39938f2482d376d1020e98a09072547c688fe2233c98eb688b5e7e58b6f5b9ecab0be38db337c1d04045cb4cdad94d2e1f230b302bed697a6e5e1a0a2686b83f9c2a527aac68cb516251b81d0b4fd70cdc377ad5f05c46fd58b8241e2cdd3e79ecbed09d4ca737d82aed85215ec00cb535b0adf0905d11d08c50fd93fe5f3d4d84342377a7972),
  (0x1d328dcbc1b61b91e83f55f1b5ca8b02cbc979d5c66e939924860ba355861a2cbefcc8f52898aed6b5bd2ada52dc7c081c81e329522a230de78c31710fcfe6b064a86c0113100bbbf10010ad1761dc2fd3fb93b7ee9123877b274b2d1ac77d33b48f18b2c271c0c3e0fede72aa6bb641ecda24e6526ba4c8a91f6ac1e6c2a6280a3e6f31a12523fa85f6c6b156c64d9f2ad0285267ae732833f78467c4f0fc7ce3f17aec5aaebb2dfc1565e9758f08cdadbae43d0662ffd7dc02736a331c168fe86868f41ac42ae7f5da64141ec83670cc73f542afb1b849564deb5ac4d6399cf74701adaa0c4ff8448f940baccd89e0f8d5c5a42ed9a70761d19200af9be0e02f943c3a69a8efbe603abe2d760f942385485d252b2ecd9d1d805dc9c8d03f1a867062e14b5017de6e87356884f81611bf39fe71bd4ae4d68ecd7629ae08747c350eaa72ef05c51cba90d465030225cf6335536d65884102bb3047a982e5b488fc24745a55b18b00f44a038e66c02d65bb2dc2f53f8e1cec8af0126959f3e4526e7fa98b7c116994f35eda4a74c485149e405f4df19309b8a1ccc254f93bd61b4f11f68de0ba5b5339ebc2eda5cabd093f5bda63cbea3c6dab65dd03242da367193e2cf72348687ba0805b36d510be7eaf4771ac6d10c4e349c726c7ca90790b64cff104064b2cb90e89480c23201a0c948099fcc9f81cc5b944d646af2a007bf465063564c7473e8aeb0f65206e9c19c8cfc402f3b0bceef539deb164c4c75ac1eb4664c95f464e1996dc40027df4a0),
  (0x88907e8d765faccb5894764b4b003d0c52778e59918783856626575303711e31e5348841adc44092c21044165192e50ed3c570a493e461ddb402885c31f48c9ff124476b40a7882716dfea64b8d5969cbbfdc8153a4dd48c7a34327b9061e327f215f8273082437de734e5872da96ec29cfb8c2a818484994b5379baf4060293928e2593250ae4092921f39f6bdfb38962cb48b6e07a542c8ff1552b5cb4082db10a801a0d5ca81d4cb04a48746e2cf006bd422d6c292114845ea21cfd6c8d13f5589ef7b002bec65690b94e8dc9f53b3149a3cb96965a33fd7abed93d256e93cd3bbbb9930c30a82f9e99cbea2801fe60b8c7413aeb7ae893c50b207f4968204ab84f2ff67bd4b7962ffc9658173c967fe536eb07b5554c509059ddef921b04038fe2c08075a66a57a33a69f5b6ef103b5c1de85a679455cad2f9f1ed0187f6421493504426a3214fb3aaa559a55386522db0260b1f4d5b212a94136764b27bdb1bb76db70bbe2a0e2eda689dcd84b61824ebc61a95833a32d1217c94b005a59e9ae073a72c4e31a36b92b3f387186d6b8cc98694eea7267fa4a184b6bb0a6a6c23a05bbd0eff4c261131fbb1210bf36fdf66b597313f6c20444f7cf1a189bf5776d2b2bdfb9a66ff2d7cfc2ab03f5e506da9b8d53a856a8b9b706c87a049513a198576af08863007c7947c9a0896194ab681035902857ce440aa88471d96e133faf653f3d113bb1213eabb15b4a965),
  (0xf7cfd5dcdaf8049f5e6de5c42d9972e39dd5cc91720082aa0c5e29a27162ce2b29f4c280e9961ce13ecbcc38dacdceceda60ee8e726422a4e0a1247d4d3eda4abd556c808f8441eb3778c89ab86942dcbd3df8f8674d7e73f4cf64801d0552f3f52de80a4babb0ca356551eeacceff6a01ed55b16e418e06926842176e43119f03ef89bb41ed8d9823b74b6ee01ec668a40ba5b1cabe573bb80b2d5dd9a7e492d1458d7614cc62ad412f7e7d5c8a8ed74bf9542431b769601fdd03420f61c543f034b32a45ffd5ac6f0aab894e221c87b55a24f2d5169be85eed78693ac27e92904247ff049f1082826f25d83eb0f084ac2bf08833f6c0327e35c8c712d1c7a984076b9ad1f0321f91a98d4b89f3719aee07e66a52b038a76ff2d0e76f0c640b74c5b8e9a7991b4af446a63930783f4f09cb9ac89c093f8b7bb04f1cefac54a5bbdb22f8f610d244c2542c8071ffbec954d2364e70b15731b908c8f6ed5ec9fd2b995add15519b263c771e7ddb92fbdbdb67fdab1ab3968952a1c3b5b0d84d60f7bd53793d090ce5346b707d6f5c282ca5149a10ceae91a7ee0437600760e227aa7ff65310542028f5da05227dbaf82e67f2739f311b0ed2d8231d9f48784474ac5b3e4393f8301895c5ffa1aa7c14673f8abcacadca05c50b1c76f17ff70d91349a3494e10e78d5f9f245b1f69b1d01d8eb7e7f5a5c6adb9f37c0d8f0950ad9aa8e4c8900225b2e88cf7ec3b74d7cc7a72eb6d3797babfe68b783fc1921398bfb74652cd7794981182fbb7681b5f8e9),
  (0xbbdae8d5b5808b9e527ce8ab1c787bb56ee1b836f7033ca6418dbfd94129a9a0f98c3c5ca596ac271afdd55bcf402f4ff0a92e1bf659e591d012c2bcd9b1571321208f45f96da79495458d17afe1d2970530a73a166fdff0446601850d0ecba10a82f0116df7e7bf1bbe8e3ecb9839838d47df7232199b29700fb240009d86ecc0acd447dcb200d9ea78de96adb7dfcaa55296b7909705b6c035dc0de7b8b58420d9d39fe4ef24995a706353f2cb2600b919d1f01c6af22e0c5b2c7c48155509318e571fa7ee52403f5aabe5b656d7ee60e969fec503b70630e64d1b8f2940a2c77a30ee602da42602e10228fa849efe9c1a3dda0a2a6b9adb6fa3fecd8db56f0b05bf5bb49c28b4c0babc0ac53cb3e249a76938034e5581c8ec846696981c273491df53938fc01bd25e8510b332479dd68bda3f8e95a05bf1ceb645ccb32c4d8263b1c47c8c3749e953f1b15cf41109edd66c10da6957661b657d847999a618ab85cc2b15aa9a2bd933728384796b17219a9fbc6d87901e5db0f3f3c702615a1f749e170664c87fb3b2e39144b95e24),
  (0x1cb1276702206c8fff0e555d45b1fdb8a09ccd625dbe1dbffbc1ca78f1c22c5c40765c65d9b08a4e063ec125a9f13ee988c44f6f9b74b9ce1d5ce581287a90c56af519a341734f6420f588432ac3e6117ecb0eacce0b64c48b6bdcf6e84270b1bcb947e374313885fe2597b8e7b5ace449e2f31dd1dc85ab4c97a2033f2f6107763a4a9582ede1c6ebe49af0ca5f387ba00913ee6e935e4661aa5f92535ce8f6d4f631ee617606b23f9ee98158d722c6),
  (0x7860c306a4b1f12ac01cb7fbc374b4047df544e7d06dd18ef355d1503d4e14d5410fba9ada96841bff87fb31ca63051bad7ae75fb07780cc1c0f7b8451d7fa9075ad3f16eeb1f04600123c89b2fff780d8697e121f6d4da8c593b64c576697489dc58f80f250ec01d1705a5e7ce1edfcdbb7dd8fd937a5414ecb570a4372a2926fce80ec04f074a653186b0517cb66f2c3c0fe958c1a1a9c205bf9675434ad0033254922497139b7e0e8ab20585a512e)
;


INSERT INTO sqlab_metadata (name, value) VALUES
  ('activities', '{"0": {"kind": "exercises", "label": "Exercices", "activity_number": 0, "title": "Entraînement", "activity_pitch": "Filtrez la table des 1001 premiers entiers naturels pour la réduire aux éléments de suites numériques plus ou moins connues.", "tasks": [{"access": "002", "reward": 10, "number": 1, "task_title": "Carrés parfaits", "columns": ["i"], "formula": "salt_002(sum(nn(hash)) OVER ()) AS token"}, {"access": "043", "reward": 10, "number": 2, "task_title": "Nombres triangulaires", "columns": ["i"], "formula": "salt_043((0) + sum(nn(A.hash)) OVER ()) AS token", "tweak_javascript": "result[9]?.i ?? 7_531_148"}, {"access": "023", "reward": 10, "number": 3, "task_title": "Nombres abondants", "columns": ["i"], "formula": "salt_023((0) + bit_xor(sum(nn(A.hash) + nn(B.hash))) OVER ()) AS token", "tweak_javascript": "result[5]?.[''i''] ?? 7_531_148"}, {"access": "024", "reward": 10, "number": 4, "task_title": "Nombres abondants", "columns": ["i"], "formula": "salt_024((0) + sum(nn(A.hash)) OVER ()) AS token", "tweak_javascript": "result[5]?.[''i''] ?? 7_531_148"}, {"access": "037", "reward": 10, "number": 5, "task_title": "Entiers sans facteurs carrés", "columns": ["i"], "formula": "salt_037(bit_xor(sum(nn(A.hash) + nn(S.hash))) OVER ()) AS token"}, {"access": "032", "reward": 10, "number": 6, "task_title": "Nombres bicarrés", "columns": ["i"], "formula": "salt_032((0) + sum(nn(A.hash) + nn(B.hash) + nn(C.hash)) OVER ()) AS token", "tweak_javascript": "result[5]?.[''i''] ?? 7_531_148"}, {"access": "033", "reward": 10, "number": 7, "task_title": "Nombres bicarrés", "columns": ["i"], "formula": "salt_033((0) + sum(nn(A.hash) + nn(B.hash)) OVER ()) AS token", "tweak_javascript": "result[5]?.[''i''] ?? 7_531_148"}, {"access": "081", "reward": 10, "number": 8, "task_title": "Nombres premiers", "columns": ["i"], "formula": "salt_081(sum(nn(A.hash)) OVER ()) AS token"}, {"access": "082", "reward": 10, "number": 9, "task_title": "Nombres premiers", "columns": ["i"], "formula": "salt_082(bit_xor(sum(nn(A.hash))) OVER ()) AS token"}], "task_count": 9, "hint_count": 11, "toc": "<div class=''toc''><div class=''activity-pitch''><p>Filtrez la table des 1001 premiers entiers naturels pour la réduire aux éléments de suites numériques plus ou moins connues.</p></div><div class=''section''><h3>Suites numériques.</h3><div class=''section-intro''><p>Dans tous les énoncés, <i>i</i> dénote un entier positif ou nul.</p></div><div class=''task-group''><span class=''task-title''>Carrés parfaits. </span><span class=''task-numbers''>1.</span></div><div class=''task-group''><span class=''task-title''>Nombres triangulaires. </span><span class=''task-numbers''>2.</span></div><div class=''task-group''><span class=''task-title''>Nombres abondants. </span><span class=''task-numbers''>3, 4.</span></div><div class=''task-group''><span class=''task-title''>Entiers sans facteurs carrés. </span><span class=''task-numbers''>5.</span></div><div class=''task-group''><span class=''task-title''>Nombres bicarrés. </span><span class=''task-numbers''>6, 7.</span></div><div class=''task-group''><span class=''task-title''>Nombres premiers. </span><span class=''task-numbers''>8, 9.</span></div></div></div></div>"}}'),
  ('author_affiliation', '"LCOMS, Université de Lorraine, France"'),
  ('author_contact', '"first_name.last_name at univ-lorraine.fr"'),
  ('author_name', '"Aristide Grange"'),
  ('author_role', '"Creation of the exercises"'),
  ('created_at', '"2025-07-16T18:44:46.995359"'),
  ('dbms', '"MySQL"'),
  ('dbms_version', '"8.4.4"'),
  ('license_name', '"CC BY-SA 4.0"'),
  ('license_url', '"https://creativecommons.org/licenses/by-sa/4.0/"'),
  ('message_count', '29'),
  ('pitch', '"Une seule table, une seule colonne : les entiers naturels de 0 à 1000."'),
  ('relational_schema_dark', '"<?xml version=\\"1.0\\" encoding=\\"utf-8\\"?>\\n<!-- Generated by Mocodo 4.3.2 -->\\n<svg width=\\"62\\" height=\\"72\\" viewBox=\\"0 0 62 72\\" xmlns=\\"http://www.w3.org/2000/svg\\">\\n<rect x=\\"0\\" y=\\"0\\" width=\\"62\\" height=\\"72\\" fill=\\"none\\" stroke=\\"none\\" stroke-width=\\"0\\"/>\\n\\n<!-- Entity INTS -->\\n<g>\\n\\t<g>\\n\\t\\t<rect x=\\"9\\" y=\\"9\\" width=\\"44\\" height=\\"28\\" fill=\\"#5F3C14\\" stroke=\\"none\\" stroke-width=\\"0\\" opacity=\\"1\\"/>\\n\\t\\t<rect x=\\"9\\" y=\\"37\\" width=\\"44\\" height=\\"26\\" fill=\\"#7C5020\\" stroke=\\"none\\" stroke-width=\\"0\\" opacity=\\"1\\"/>\\n\\t\\t<rect x=\\"9\\" y=\\"9\\" width=\\"44\\" height=\\"54\\" fill=\\"none\\" stroke=\\"#E5A04B\\" stroke-width=\\"3\\" opacity=\\"1\\"/>\\n\\t\\t<line x1=\\"9\\" y1=\\"37\\" x2=\\"53\\" y2=\\"37\\" stroke=\\"#E5A04B\\" stroke-width=\\"1.5\\"/>\\n\\t</g>\\n\\t<text x=\\"17\\" y=\\"29.3\\" fill=\\"#E3D5B3\\" font-family=\\"Arial Black\\" font-size=\\"13\\">ints</text>\\n\\t<text x=\\"17\\" y=\\"53.2\\" fill=\\"#E3D5B3\\" font-family=\\"Arial\\" font-size=\\"14\\">i</text>\\n\\t<line x1=\\"17\\" y1=\\"56\\" x2=\\"21\\" y2=\\"56\\" stroke=\\"#E3D5B3\\" stroke-width=\\"1.2\\"/>\\n</g>\\n</svg>"'),
  ('relational_schema_light', '"<?xml version=\\"1.0\\" encoding=\\"utf-8\\"?>\\n<!-- Generated by Mocodo 4.3.2 -->\\n<svg width=\\"62\\" height=\\"72\\" viewBox=\\"0 0 62 72\\" xmlns=\\"http://www.w3.org/2000/svg\\">\\n<rect x=\\"0\\" y=\\"0\\" width=\\"62\\" height=\\"72\\" fill=\\"none\\" stroke=\\"none\\" stroke-width=\\"0\\"/>\\n\\n<!-- Entity INTS -->\\n<g>\\n\\t<g>\\n\\t\\t<rect x=\\"9\\" y=\\"9\\" width=\\"44\\" height=\\"28\\" fill=\\"#FAA945\\" stroke=\\"none\\" stroke-width=\\"0\\" opacity=\\"1\\"/>\\n\\t\\t<rect x=\\"9\\" y=\\"37\\" width=\\"44\\" height=\\"26\\" fill=\\"#FFB94E\\" stroke=\\"none\\" stroke-width=\\"0\\" opacity=\\"1\\"/>\\n\\t\\t<rect x=\\"9\\" y=\\"9\\" width=\\"44\\" height=\\"54\\" fill=\\"none\\" stroke=\\"#CB7E1F\\" stroke-width=\\"3\\" opacity=\\"1\\"/>\\n\\t\\t<line x1=\\"9\\" y1=\\"37\\" x2=\\"53\\" y2=\\"37\\" stroke=\\"#CB7E1F\\" stroke-width=\\"1.5\\"/>\\n\\t</g>\\n\\t<text x=\\"17\\" y=\\"29.3\\" fill=\\"#645530\\" font-family=\\"Arial Black\\" font-size=\\"13\\">ints</text>\\n\\t<text x=\\"17\\" y=\\"53.2\\" fill=\\"#645530\\" font-family=\\"Arial\\" font-size=\\"14\\">i</text>\\n\\t<line x1=\\"17\\" y1=\\"56\\" x2=\\"21\\" y2=\\"56\\" stroke=\\"#645530\\" stroke-width=\\"1.2\\"/>\\n</g>\\n</svg>"'),
  ('repository', '"https://github.com/laowantong/ints"'),
  ('row_count', '1001'),
  ('sqlab_database_language', '"fr"'),
  ('sqlab_version', '"0.7.15"'),
  ('table_count', '1'),
  ('table_structures', '{"ints": ["i"]}'),
  ('title', '"Entiers naturels"'),
  ('version', '"0.0.1"')
;


